<?xml version="1.0" encoding="utf-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
<map:components>

  <map:generators default="file">
    <map:generator
      name="commandGenerator"
      src="org.xmlqstat.generator.CommandGenerator"
      >
      <expire>60</expire>
    </map:generator>
  </map:generators>

  <map:transformers default="xslt">
    <map:transformer name="xinclude"
      src="org.apache.cocoon.transformation.XIncludeTransformer"
      />
  </map:transformers>

  <map:readers default="resource" />

  <map:serializers default="xml">
    <!-- make default XML serializer UTF-8 -->
    <map:serializer
      name="xml"
      src="org.apache.cocoon.serialization.XMLSerializer"
      mime-type="text/xml"
      >
      <encoding>UTF-8</encoding>
    </map:serializer>
    <!-- ATOM 1.0 Feed Serialzer -->
    <map:serializer
      name="atom-xml"
      src="org.apache.cocoon.serialization.XMLSerializer"
      mime-type="application/atom+xml; charset=UTF-8"
      >
      <encoding>UTF-8</encoding>
    </map:serializer>
  </map:serializers>

  <map:selectors default="browser">
    <!-- Need to auto-detect MS browers -->
    <map:selector name="browser"
      src="org.apache.cocoon.selection.BrowserSelector"
      >
      <browser name="explorer" useragent="MSIE"/>
    </map:selector>

    <map:selector name="resource-exists"
      src="org.apache.cocoon.selection.ResourceExistsSelector"
      >
      <map:parameter src="prefix" value="/" />
    </map:selector>
  </map:selectors>

  <map:matchers default="wildcard">
    <map:matcher
      name="wildcard"
      src="org.apache.cocoon.matching.WildcardURIMatcher"/>
    <map:matcher
      name="regexp"
      src="org.apache.cocoon.matching.RegexpURIMatcher"
      />
  </map:matchers>

</map:components>

<map:pipelines>
<!--
   | Setup all the sources (files or via the CommandGenerator) as
   | as cocoon:/{name}
   |   1) to allow easier administration
   |   2) to provide a means of viewing the xml files directly.
   |
   | Directly viewable xml also provides the possibility of collating
   | information from several clusters
   |
   | Decide yourself if you wish to use file caches or the CommandGenerator.
   | - The CommandGenerator is currently not caching properly and you may
   |   receive a "too many files open" error that requires a cocoon restart.
   -->
<map:pipeline internal-only="true" type="caching">
  <!-- the site configuration file -->
  <map:match pattern="config">
    <map:generate  src="config/config.xml" />
    <map:serialize/>
  </map:match>

  <!-- list of possible cache/*.xml, cache-{clusterName}/*.xml cache files -->
  <map:match pattern="cache-files">
    <map:generate type="directory"  src=".">
      <map:parameter name="depth"   value="2"/>
    </map:generate>
    <map:transform src="xsl/cocoon/prune-cachedir-listing.xsl"/>
    <map:serialize/>
  </map:match>

  <!--
     | We can either cache the qstat query from the qlicserver for re-use here
     | (highly advisable if the qlicserver is running anyhow), or generate
     | contents on-the-fly with the CommandGenerator.
     | NB:
     | The 'qstat.sh' allows us to add a ROOT=.., CELL=.. initial parameters
     | for addressing different clusters and a JOB=.. parameter for qstat -j
     | (handles empty requests nicely).
     -->

</map:pipeline>

<map:pipeline type="caching">
  <!-- let cocoon find our static files
       These are redirects:
       -->
  <map:match pattern="cluster/*/css/*.css">
    <map:read mime-type="text/css" src="css/{2}.css" />
  </map:match>
  <map:match pattern="cluster/*/javascript/*.js">
    <map:read mime-type="text/javascript" src="javascript/{2}.js" />
  </map:match>
  <map:match pattern="cluster/*/**/*.png">
    <map:read mime-type="image/png" src="{2}/{3}.png" />
  </map:match>

  <!-- these are normal static files -->
  <map:match pattern="css/*.css">
    <map:read mime-type="text/css" src="css/{1}.css" />
  </map:match>
  <map:match pattern="javascript/*.js">
    <map:read mime-type="text/javascript" src="javascript/{1}.js" />
  </map:match>
  <map:match pattern="**/*.png">
    <map:read mime-type="image/png" src="{1}/{2}.png" />
  </map:match>

  <!-- static config, xml, xsl files -->
  <map:match pattern="config/*.xml">
    <map:read mime-type="text/xml" src="config/{1}.xml" />
  </map:match>
  <map:match pattern="xml/*.xml">
    <map:read mime-type="text/xml" src="xml/{1}.xml" />
  </map:match>
  <map:match pattern="xsl/*.xsl">
    <map:read mime-type="text/xml" src="xsl/{1}.xsl" />
  </map:match>
  <map:match pattern="xsl/exslt-templates/*.xsl">
    <map:read mime-type="text/xml" src="xsl/exslt-templates/{1}.xsl" />
  </map:match>

  <!-- general cached xml files -->
  <map:match pattern="cache/*.xml">
    <map:generate  src="cache/{1}.xml"/>
    <map:serialize/>
  </map:match>

  <!--
      define various URL for obtaining cached information
      or to invoke the CommandGenerator to request new information
  -->

  <!-- catch errors -->
  <map:match pattern="qlicserver~.xml">
    <map:generate  type="request"/>
    <map:transform src="xsl/cocoon/error404.xsl">
      <!-- server information -->
      <map:parameter
          name="server-info"
          value="{cocoon-properties:name}-{cocoon-properties:version}"
          />
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/qlicserver~default.xml"
       resources for the default cluster
       display the resource usage/availability (garnered by qlicserver)
       -->
  <map:match pattern="qlicserver~default.xml">
    <map:select type="resource-exists">
    <map:when test="cache/qlicserver.xml">
      <map:generate src="cocoon:/cache/qlicserver.xml"/>
      <map:serialize/>
    </map:when>
    <map:otherwise>
      <map:generate  type="request"/>
      <map:transform src="xsl/cocoon/error404.xsl">
        <!-- server information -->
        <map:parameter
            name="server-info"
            value="{cocoon-properties:name}-{cocoon-properties:version}"
            />
        <map:parameter name="serverName" value="{request:serverName}" />
      </map:transform>
      <map:serialize type="xhtml"/>
    </map:otherwise>
    </map:select>
  </map:match>

  <!-- url: "/<webapp>/qlicserver~{clusterName}.xml"
       resources for a particular cluster name
       display the resource usage/availability (garnered by qlicserver)
       -->
  <map:match pattern="qlicserver~*.xml">
    <map:select type="resource-exists">
    <map:when test="cache-{1}/qlicserver.xml">
      <map:generate  src="cache-{1}/qlicserver.xml"/>
    </map:when>
    <map:when test="cache/qlicserver~{1}.xml">
      <map:generate  src="cocoon:/cache/qlicserver~{1}.xml"/>
    </map:when>
    <map:otherwise>
      <map:generate type="request"/>
    </map:otherwise>
    </map:select>
    <map:serialize/>
  </map:match>



  <!--
     | Notes for understanding the command-generator mappings.
     | Replace '{Function}' with qstatf, qstatj calls.
     |
     | "/{Function}~default.xml"
     | '{Function}' w/o cluster name
     |   1. check cache/{Function}.xml
     |   2. xslt/cocoon-redirect-query to extract SGE_ROOT, SGE_CELL for default
     |      and rewrite the query as "/{Function}.xml/~{cell}/{root}".
     |
     | "/{Function}~{NAME}.xml"
     | 'Function' for a particular cluster name
     |   1. check cache-{NAME}/{Function}.xml
     |   2. check cache/{Function}~{NAME}.xml
     |   3. use xslt/cocoon-redirect-query to extract SGE_ROOT, SGE_CELL for NAME
     |      and rewrite the query as "/{Function}.xml/~{cell}/{root}".
     |
     | Note:
     |  The subsequent xinclude redirects the pipeline which results in the
     |  command-generator being called with "CELL={1} ROOT=/{2}" as its initial
     |  arguments. It is thus imperative that qstat.sh (or another script)
     |  be used that interpretes these values correctly.
     -->

  <!-- url: "/<webapp>/qstatf~default.xml"
       qstatf w/o cluster name
       See notes above
       -->
  <map:match pattern="qstatf~default.xml">
    <map:select type="resource-exists">
    <map:when test="cache/qstatf.xml">
      <map:generate src="cocoon:/cache/qstatf.xml"/>
    </map:when>
    <map:otherwise>
      <!--
         | fetch from "/<webapp>/qstatf.xml/~{sge_cell}/{sge_root}" via xinclude
         | (Note: the input xml is irrelevant)
         -->
      <map:generate  type="request" />
      <map:transform src="xsl/cocoon-redirect-query.xsl">
        <map:parameter name="clusterName" value="default" />
        <map:parameter name="serverName"  value="{request:serverName}" />
        <map:parameter name="resource"    value="qstatf.xml" />
        <map:parameter name="baseURL"
            value="http://{request:serverName}:{request:serverPort}/{request:sitemapURIPrefix}"
            />
      </map:transform>
      <map:transform type="xinclude"/>
    </map:otherwise>
    </map:select>
    <map:serialize/>
  </map:match>


  <!-- url: "/<webapp>/qstatf~{clusterName}.xml"
       qstatf for a particular cluster name
       See notes above
       -->
  <map:match pattern="qstatf~*.xml">
    <map:select type="resource-exists">
    <map:when test="cache-{1}/qstatf.xml">
      <map:generate  src="cache-{1}/qstatf.xml"/>
    </map:when>
    <map:when test="cache/qstatf~{1}.xml">
      <map:generate  src="cocoon:/cache/qstatf~{1}.xml"/>
    </map:when>
    <map:otherwise>
      <!--
         | fetch from "/<webapp>/qstatf.xml/~{sge_cell}/{sge_root}" via xinclude
         | (Note: the input xml is irrelevant)
         -->
      <map:generate  type="request" />
      <map:transform src="xsl/cocoon-redirect-query.xsl">
        <map:parameter name="clusterName" value="{1}" />
        <map:parameter name="serverName"  value="{request:serverName}" />
        <map:parameter name="resource"    value="qstatf.xml" />
        <map:parameter name="baseURL"
            value="http://{request:serverName}:{request:serverPort}/{request:sitemapURIPrefix}"
            />
      </map:transform>
      <map:transform type="xinclude"/>
    </map:otherwise>
    </map:select>
    <map:serialize/>
  </map:match>

  <!-- url: "/<webapp>/qstatf.xml/~{sge_cell}/{sge_root}"
       qstatf for a particular SGE_CELL, SGE_ROOT combination
       -->
  <map:match pattern="qstatf.xml/~*/**">
    <map:generate type="commandGenerator"
        src="{contextpath:../scripts/}qstat.sh CELL={1} ROOT=/{2} -u * -xml -r -f -F load_avg,num_proc -explain aAcE"
        />
    <map:serialize/>
  </map:match>


  <!-- url: "/<webapp>/qstatj~{clusterName}.xml?jobId"
     | qstatj for a particular cluster name
     | See notes above
     -->
  <map:match pattern="qstatj~*.xml">
    <map:generate  type="request"/>
    <!--
       | fetch from "/<webapp>/qstatj.xml/~{sge_cell}/{sge_root}" via xinclude
       | (Note: the input xml is irrelevant)
       -->
    <map:transform src="xsl/cocoon-redirect-query.xsl">
      <map:parameter name="clusterName" value="{1}" />
      <map:parameter name="serverName"  value="{request:serverName}" />
      <map:parameter name="request"     value="{request:queryString}" />
      <map:parameter name="resource"    value="qstatj.xml" />
      <map:parameter name="baseURL"
          value="http://{request:serverName}:{request:serverPort}/{request:sitemapURIPrefix}"
          />
    </map:transform>
    <map:transform type="xinclude"/>
    <map:serialize/>
  </map:match>

  <!-- url: "/<webapp>/qstatj.xml/~{sge_cell}/{sge_root}?jobId"
       qstatj for a particular SGE_CELL, SGE_ROOT combination
       -->
  <map:match pattern="qstatj.xml/~*/**">
    <map:generate type="commandGenerator"
        src="{contextpath:../scripts/}qstat.sh CELL={1} ROOT=/{2} JOB={request:queryString} -xml"
    />
    <map:serialize/>
  </map:match>


  <!-- old entry point -->
  <map:match pattern="cluster">
    <map:redirect-to uri="" />
  </map:match>

  <!--  MAIN ENTRY POINT -->

  <!-- url: "/<webapp>/"
       index of clusters
       -->
  <map:match pattern="">
    <map:generate  src="cocoon:/cache-files" />
    <map:transform src="xsl/index-xhtml.xsl">
      <!-- server information -->
      <map:parameter
          name="server-info"
          value="{cocoon-properties:name}-{cocoon-properties:version}"
      />
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/cache"
       xml listing of potential cache files
       -->
  <map:match pattern="cache">
    <map:generate  src="cocoon:/cache-files" />
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="dir" value="cache"/>
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>


  <!-- url: "/<webapp>/sitemap"
       view this sitemap
       -->
  <map:match pattern="sitemap.xmap">
    <map:generate  src="sitemap.xmap"/>
    <map:serialize/>
  </map:match>

  <!-- url: "/<webapp>/test"
       misc browser/javascript tests
       apply xslt to any xml junk
       -->
  <map:match pattern="test">
    <map:generate  type="request" />
    <map:transform src="xsl/test-xhtml.xsl"/>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for path "test.xml" -->
  <map:match pattern="test.xml">
    <map:generate  type="request" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="stylesheet" value="xsl/test-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for url path /info/ -->
  <!-- needs fixing -->
  <map:match pattern="info/_*.html">
    <map:generate  src="xml/info/{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="../xsl/info-to-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- documentation rendering for url path /info/ -->
  <map:match pattern="info/*.html">
    <map:generate  src="xml/info/{1}.xml" />
    <map:transform src="xsl/info-to-xhtml.xsl"/>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- Catch people going to http://<server>/<webapp>/feed/  -->
  <map:match pattern="feed/">
    <map:redirect-to uri="overview"/>
  </map:match>

  <!-- atom xml feed.
       The iso8601 timestamp includes 'Z' - the timezone
       The baseURL must be passed through.
       -->
  <map:match pattern="feed/*">
    <map:generate  src="cocoon:/qstatf~default.xml"/>
    <map:transform src="xsl/feed-atom-{1}.xsl">
      <map:parameter name="serverName" value="{request:serverName}" />
      <map:parameter name="timestamp"  value="{date:yyyy-MM-dd'T'HH:mm:ssZ}"/>
      <map:parameter name="baseURL"
          value="http://{request:serverName}:{request:serverPort}/{request:sitemapURIPrefix}"
          />
    </map:transform>
    <map:serialize type="atom-xml"/>
  </map:match>

</map:pipeline>


<map:pipeline>

  <!-- Catch trailing slash "/<webapp>/cluster/" -->
  <map:match pattern="cluster/">
    <map:redirect-to uri="../cluster"/>
  </map:match>

  <!-- Redirect "/<webapp>/cluster/{clusterName}"
            and "/<webapp>/cluster/{clusterName}/"
       to "/<webapp>/cluster/{clusterName}/jobs"
       -->
  <map:match pattern="cluster/*">
    <map:redirect-to uri="{1}/jobs"/>
  </map:match>

  <map:match pattern="cluster/*/">
    <map:redirect-to uri="jobs"/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/cache"
       url: "/<webapp>/cluster/default/cache"
       list cache files
       -->
  <map:match pattern="cluster/default/cache">
    <map:select type="resource-exists">
    <map:when test="cache">
      <map:generate type="directory"  src="cache">
        <map:parameter name="depth"   value="1"/>
        <map:parameter name="include" value="\.xml$"/>
      </map:generate>
    </map:when>
    <map:otherwise>
      <map:generate type="request"/>
    </map:otherwise>
    </map:select>
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="prefix" value="" />
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <map:match pattern="cluster/*/cache">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:generate type="directory"  src="cache-{1}">
        <map:parameter name="depth"   value="1"/>
        <map:parameter name="include" value="\.xml$"/>
      </map:generate>
    </map:when>
    <map:otherwise>
      <map:generate type="request"/>
    </map:otherwise>
    </map:select>
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="prefix" value="" />
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/qstatj.xml?jobId"
       generate job details via second webserver (handles empty query strings)
       -->
  <map:match pattern="cluster/*/qstatj.xml">
    <map:generate  src="cocoon:/qstatj~{1}.xml" />
    <map:serialize/>
  </map:match>


  <!-- client-side XSLT for jobs -->
  <map:match pattern="cluster/*/jobs.xml">
    <map:generate src="cocoon:/cluster/{1}/qstat.xml"/>
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          filterByUser="{request-param:user}"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="../../xsl/qstat-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for queues -->
  <map:match pattern="cluster/*/queues.xml">
    <map:generate src="cocoon:/cluster/{1}/qhost.xml"/>
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          renderMode="{request:queryString}"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="../../xsl/qhost-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for summary -->
  <map:match pattern="cluster/*/summary.xml">
    <map:redirect-to uri="queues.xml?summary"/>
  </map:match>

  <!-- client-side XSLT for resources -->
  <map:match pattern="cluster/*/resources.xml">
    <map:generate src="cocoon:/cluster/{1}/qlicserver.xml"/>
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="../../xsl/qlic-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for jobinfo -->
  <map:match pattern="cluster/*/jobinfo.xml">
    <map:generate  src="cocoon:/cluster/{1}/qstatj.xml"/>
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="../../xsl/qstatj-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>


  <!-- url: "/<webapp>/cluster/{clusterName}/*.xml"
       view cached xml files directly
       -->
  <map:match pattern="cluster/default/*.xml">
    <map:select type="resource-exists">
    <map:when test="cache/{1}.xml">
      <map:generate src="cache/{1}.xml" />
    </map:when>
    <map:otherwise>
      <map:generate type="request" />
    </map:otherwise>
    </map:select>
    <map:serialize/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/*.xml"
       view cached xml files directly
       -->
  <map:match pattern="cluster/*/*.xml">
    <map:select type="resource-exists">
    <map:when test="cache-{1}/{2}.xml">
      <map:generate src="cache-{1}/{2}.xml" />
    </map:when>
    <map:when test="cache/{2}~{1}.xml">
      <map:generate src="cache/{2}~{1}.xml" />
    </map:when>
    <map:otherwise>
      <map:generate type="request" />
    </map:otherwise>
    </map:select>
    <map:serialize/>
  </map:match>


  <!-- url: "/<webapp>/cluster/{clusterName}/jobs"
       display running and pending jobs, optionally selected by user
       -->
  <map:match pattern="cluster/*/jobs">
    <map:generate src="cocoon:/cluster/{1}/qstat.xml"/>
    <map:transform src="xsl/qstat-xhtml.xsl">
      <map:parameter name="clusterName"   value="{1}" />
      <map:parameter name="serverName"    value="{request:serverName}"/>
      <map:parameter name="timestamp"     value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="filterByUser"  value="{request-param:user}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/queues?renderMode"
       display all the queue instances or just a summary
       -->
  <map:match pattern="cluster/*/queues">
    <map:generate src="cocoon:/cluster/{1}/qhost.xml"/>
    <map:transform src="xsl/qhost-xhtml.xsl">
      <map:parameter name="clusterName" value="{1}" />
      <map:parameter name="serverName"  value="{request:serverName}"/>
      <map:parameter name="timestamp"   value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="renderMode"  value="{request:queryString}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- redirect: "/<webapp>/cluster/{clusterName}/summary"
       to queues?summary
       -->
  <map:match pattern="cluster/*/summary">
    <map:redirect-to uri="queues?summary"/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/resources"
       display the resource usage/availability (garnered by qlicserver)
       -->
  <map:match pattern="cluster/*/resources">
    <map:generate src="cocoon:/cluster/{1}/qlicserver.xml"/>
    <map:transform src="xsl/qlic-xhtml.xsl">
      <map:parameter name="clusterName" value="{1}" />
      <map:parameter name="serverName"  value="{request:serverName}"/>
      <map:parameter name="timestamp"   value="{date:yyyy-MM-dd_HH:mm:ss}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/jobinfo?jobNumber"
       generate job details via second webserver (handles empty query strings)
       -->
  <map:match pattern="cluster/*/jobinfo">
    <map:generate  src="cocoon:/cluster/{1}/qstatj.xml"/>
    <map:transform src="xsl/qstatj-xhtml.xsl">
      <map:parameter name="clusterName" value="{1}" />
      <map:parameter name="serverName"  value="{request:serverName}"/>
      <map:parameter name="timestamp"   value="{date:yyyy-MM-dd_HH:mm:ss}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!--
     | list directory contents:
     | "/<webapp>/config"
     | "/<webapp>/xsl"
     -->
  <map:match pattern="^(config|xsl)$" type="regexp">
    <map:generate type="directory"  src="{1}">
      <map:parameter name="depth"   value="1"/>
      <map:parameter name="include" value="\.(png|xml|xsl)$"/>
    </map:generate>
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- client-side XSLT for index -->
  <map:match pattern="^(index.)?xml$" type="regexp">
    <map:generate  src="cocoon:/cache-files" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <!-- server information -->
      <map:parameter name="xslt-parameters" value='
          serverName="{request:serverName}"
          server-info="{cocoon-properties:name}-{cocoon-properties:version}"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/index-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>


  <!-- client-side XSLT for jobs~NAME -->
  <map:match pattern="jobs~*.xml">
    <map:generate  src="cocoon:/qstatf~{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          filterByUser="{request-param:user}"
          renderMode="jobs"
          menuMode="qstatf"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/qstatf-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for jobinfo~NAME -->
  <map:match pattern="jobinfo~*.xml">
    <map:generate  src="cocoon:/qstatj~{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          menuMode="qstatf"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/qstatj-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for queues~NAME -->
  <map:match pattern="queues~*.xml">
    <map:generate  src="cocoon:/qstatf~{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          renderMode="{request:queryString}"
          menuMode="qstatf"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/qstatf-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for resources~NAME -->
  <map:match pattern="resources~*.xml">
    <map:generate  src="cocoon:/qlicserver~{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          menuMode="qstatf"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/qlic-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>

  <!-- client-side XSLT for summary~NAME -->
  <map:match pattern="report~*.xml">
    <map:generate  src="cocoon:/qstatf~{1}.xml" />
    <map:transform src="xsl/cocoon/attach-stylesheet.xsl">
      <map:parameter name="xslt-parameters" value='
          clusterName="{1}"
          serverName="{request:serverName}"
          timestamp="{date:yyyy-MM-dd_HH:mm:ss}"
          renderMode="report"
          menuMode="qstatf"
          urlExt=".xml"
      '/>
      <map:parameter name="rawxml" value="{request-param:rawxml}" />
      <map:parameter name="stylesheet" value="xsl/qstatf-xhtml.xsl" />
    </map:transform>
    <map:serialize/>
  </map:match>


  <!-- url: "/<webapp>/jobs~{clusterName}?user"
       display running and pending jobs, optionally selected by user
       data gathered from "qstat -f", rendered with xmlqstat navigation
       -->
  <map:match pattern="jobs~*">
    <map:generate  src="cocoon:/qstatf~{1}.xml" />
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="clusterName"   value="{1}" />
      <map:parameter name="serverName"    value="{request:serverName}"/>
      <map:parameter name="timestamp"     value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="filterByUser"  value="{request-param:user}"/>
      <map:parameter name="menuMode"      value="qstatf"/>
      <map:parameter name="renderMode"    value="jobs"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/jobinfo~{clusterName}?jobId"
       job details rendered with xmlqstat navigation
       -->
  <map:match pattern="jobinfo~*">
    <map:generate  src="cocoon:/qstatj~{1}.xml" />
    <map:transform src="xsl/qstatj-xhtml.xsl">
      <map:parameter name="clusterName"  value="{1}" />
      <map:parameter name="serverName"   value="{request:serverName}"/>
      <map:parameter name="timestamp"    value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="menuMode"     value="qstatf"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/queues~{clusterName}"
       display all the queue instances
       data gathered from "qstat -f", rendered with xmlqstat navigation
       -->
  <map:match pattern="queues~*">
    <map:generate  src="cocoon:/qstatf~{1}.xml"/>
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="clusterName"  value="{1}" />
      <map:parameter name="serverName"   value="{request:serverName}"/>
      <map:parameter name="timestamp"    value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="renderMode"   value="{request:queryString}"/>
      <map:parameter name="menuMode"     value="qstatf"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <map:match pattern="resources~">
    <map:redirect-to uri="resources~default" />
  </map:match>

  <!-- url: "/<webapp>/cluster/{clusterName}/resources"
       display the resource usage/availability (garnered by qlicserver)
       -->
  <map:match pattern="resources~*">
    <map:generate src="cocoon:/qlicserver~{1}.xml"/>
    <map:transform src="xsl/qlic-xhtml.xsl">
      <map:parameter name="clusterName"  value="{1}" />
      <map:parameter name="serverName"   value="{request:serverName}"/>
      <map:parameter name="timestamp"    value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="menuMode"     value="qstatf"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/<webapp>/report~{clusterName}"
       a very terse report of the queue status for {clusterName}
       data gathered from "qstat -f", rendered with xmlqstat navigation
       -->
  <map:match pattern="report~*">
    <map:generate  src="cocoon:/qstatf~{1}.xml" />
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="clusterName"  value="{1}" />
      <map:parameter name="serverName"   value="{request:serverName}"/>
      <map:parameter name="timestamp"    value="{date:yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="renderMode"   value="report"/>
      <map:parameter name="menuMode"     value="qstatf"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- urls for accessing the default cluster paths -->
  <map:match pattern="jobs">
    <map:redirect-to uri="jobs~default" />
  </map:match>

  <map:match pattern="jobinfo">
    <map:redirect-to uri="jobinfo~default" />
  </map:match>

  <map:match pattern="queues">
    <map:redirect-to uri="queues~default" />
  </map:match>

  <map:match pattern="report">
    <map:redirect-to uri="report~default" />
  </map:match>

  <map:match pattern="resources">
    <map:redirect-to uri="resources~default" />
  </map:match>

  <map:match pattern="qstatf.xml">
    <map:generate  src="cocoon:/qstatf~default.xml"/>
    <map:serialize/>
  </map:match>

  <map:match pattern="qstatj.xml">
    <map:generate  src="cocoon:/qstatj~default.xml"/>
    <map:serialize/>
  </map:match>

  <map:match pattern="qlicserver.xml">
    <map:generate  src="cocoon:/qlicserver~default.xml"/>
    <map:serialize/>
  </map:match>

  <!-- fallback - catch errors -->
  <map:match pattern="**">
    <map:generate  type="request"/>
    <map:transform src="xsl/cocoon/error404.xsl">
      <!-- server information -->
      <map:parameter name="server-info"
          value="{cocoon-properties:name}-{cocoon-properties:version}"
          />
      <map:parameter name="serverName" value="{request:serverName}" />
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>


</map:pipeline>
</map:pipelines>
</map:sitemap>
