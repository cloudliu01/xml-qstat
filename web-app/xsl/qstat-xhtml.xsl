<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE stylesheet [
<!ENTITY  newline "<xsl:text>&#x0a;</xsl:text>">
<!ENTITY  space   "<xsl:text>&#x20;</xsl:text>">
]>
<xsl:stylesheet version="1.0"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>
<!--
Copyright (c) 2009-2012 Mark Olesen

License
    This file is part of xml-qstat.

    xml-qstat is free software: you can redistribute it and/or modify it under
    the terms of the GNU Affero General Public License as published by the
    Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.

    xml-qstat is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with xml-qstat. If not, see <http://www.gnu.org/licenses/>.

Description
    process XML generated by "qstat -u * -xml -r -s prs"
    to produce a list of active and pending jobs

    expected input:
      - qstat.xml

    uses external files:
     - config/config.xml
-->

<!-- ======================= Imports / Includes =========================== -->
<!-- Include our masthead and templates -->
<xsl:include href="xmlqstat-masthead.xsl"/>
<xsl:include href="xmlqstat-templates.xsl"/>
<!-- Include processor-instruction parsing -->
<xsl:include href="pi-param.xsl"/>

<!-- ======================== Passed Parameters =========================== -->
<xsl:param name="clusterName">
  <xsl:call-template name="pi-param">
    <xsl:with-param  name="name"    select="'clusterName'"/>
  </xsl:call-template>
</xsl:param>
<xsl:param name="serverName">
  <xsl:call-template name="pi-param">
    <xsl:with-param  name="name"    select="'serverName'"/>
  </xsl:call-template>
</xsl:param>
<xsl:param name="timestamp">
  <xsl:call-template name="pi-param">
    <xsl:with-param  name="name"    select="'timestamp'"/>
  </xsl:call-template>
</xsl:param>
<xsl:param name="filterByUser">
  <xsl:call-template name="pi-param">
    <xsl:with-param  name="name"    select="'filterByUser'"/>
  </xsl:call-template>
</xsl:param>
<xsl:param name="urlExt">
  <xsl:call-template name="pi-param">
    <xsl:with-param  name="name"    select="'urlExt'"/>
  </xsl:call-template>
</xsl:param>


<!-- ======================= Internal Parameters ========================== -->
<!-- configuration parameters -->

<!-- site-specific or generic config -->
<xsl:variable name="config-file">
  <xsl:call-template name="config-file">
    <xsl:with-param  name="dir"   select="'../config/'" />
    <xsl:with-param  name="site"  select="$serverName" />
  </xsl:call-template>
</xsl:variable>

<xsl:variable
    name="configNode"
    select="document($config-file)/config" />
<xsl:variable
    name="clusterNode"
    select="$configNode/clusters/cluster[@name=$clusterName]" />

<xsl:variable name="cgi-params">
  <xsl:call-template name="cgi-params">
    <xsl:with-param name="clusterName"  select="$clusterName" />
    <xsl:with-param name="config-file"  select="$config-file" />
  </xsl:call-template>
</xsl:variable>

<!-- the date according to the processing-instruction -->
<xsl:variable name="piDate">
  <xsl:call-template name="pi-named-param">
    <xsl:with-param  name="pis"  select="processing-instruction('qstat')" />
    <xsl:with-param  name="name" select="'date'"/>
  </xsl:call-template>
</xsl:variable>

<!-- enable viewlog depending on local/global settings -->
<xsl:variable name="viewlog">
  <xsl:choose>
  <xsl:when test="$clusterNode/viewlog">
    <!-- local setting exists, check enabled -->
    <xsl:if test="
        not(string-length($clusterNode/viewlog/@enabled))
        or $clusterNode/viewlog/@enabled = 'true'">
      <xsl:value-of select="$clusterNode/viewlog" />
    </xsl:if>
  </xsl:when>
  <xsl:when test="$configNode/programs/viewlog">
    <!-- global setting exists, check enabled -->
    <xsl:if test="
        not(string-length($configNode/programs/viewlog/@enabled))
        or $configNode/programs/viewlog/@enabled = 'true'">
      <xsl:value-of select="$configNode/programs/viewlog" />
    </xsl:if>
  </xsl:when>
  </xsl:choose>
</xsl:variable>


<!-- enable/disable some things for LSF output -->
<xsl:variable name="isLSF">
  <xsl:if test="/job_info[@type = 'lsf']">
    <xsl:text>true</xsl:text>
  </xsl:if>
</xsl:variable>


<!-- ======================= Output Declaration =========================== -->
<xsl:output method="xml" indent="yes" version="1.0" encoding="UTF-8"
    doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
/>


<!-- ============================ Matching ================================ -->
<xsl:template match="/" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="Refresh" content="30" />
<link rel="icon" type="image/png" href="css/screen/icons/lorry_flatbed.png"/>
&newline;

<title> jobs
<xsl:if test="$clusterName"> @<xsl:value-of select="$clusterName"/></xsl:if>
</title>

&newline;
<xsl:comment> load javascript </xsl:comment>
&newline;
<!-- NB: <script> .. </script> needs some (any) content -->
<script src="javascript/cookie.js" type="text/javascript">
  // Dortch cookies
</script>
<script src="javascript/xmlqstat.js" type="text/javascript">
  // display altering code
</script>

&newline;
<!-- load css -->
<link href="css/xmlqstat.css" media="screen" rel="Stylesheet" type="text/css" />
<style type="text/css">
  /* initially hide elements that rely on javascript */
  #activeJobTableToggle  { visibility: hidden; }
  #pendingJobTableToggle { visibility: hidden; }
</style>
&newline;
</head>

<!-- nothing to pre-calculate -->


<!-- begin body -->
<body>
&newline;
<xsl:comment> Main body content </xsl:comment>
&newline;

<div id="main">
<!-- Topomost Logo Div -->
<xsl:call-template name="topLogo">
  <xsl:with-param name="config-file" select="$config-file" />
</xsl:call-template>
<!-- Top Menu Bar -->
<xsl:call-template name="topMenu">
  <xsl:with-param name="clusterName"   select="$clusterName"/>
  <xsl:with-param name="urlExt" select="$urlExt"/>
</xsl:call-template>

&newline;
<xsl:comment> Top dotted line bar (holds the qmaster host and update time) </xsl:comment>
&newline;
<div class="dividerBarBelow">
<xsl:choose>
<xsl:when test="$clusterNode">
  <!-- cluster/cell name -->
  <xsl:value-of select="$clusterNode/@name"/>
  <xsl:if test="string-length($clusterNode/@cell) and
      $clusterNode/@cell != 'default'">/<xsl:value-of
      select="$clusterNode/@cell"/>
  </xsl:if>
</xsl:when>
<xsl:otherwise>
  <!-- unnamed cluster: -->
  default
</xsl:otherwise>
</xsl:choose>
<!-- replace 'T' in dateTime for easier reading -->
&space; <xsl:value-of select="translate($piDate, 'T', '_')"/>
</div>
&newline;

<xsl:comment> Active Jobs </xsl:comment>
&newline;
<xsl:if test="count(//job_info)">

<!--
   | count active jobs/slots for user or everyone
   | here we can count the slots directly, since each job/task is listed separately
   -->
<xsl:variable name="AJ_total">
  <xsl:choose>
  <xsl:when test="string-length($filterByUser)">
    <xsl:value-of select="count(//job_info/queue_info/job_list[JB_owner=$filterByUser])"/>
  </xsl:when>
  <xsl:otherwise>
    <xsl:value-of select="count(//job_info/queue_info/job_list)"/>
  </xsl:otherwise>
  </xsl:choose>
</xsl:variable>
<xsl:variable name="AJ_slots">
  <xsl:choose>
  <xsl:when test="string-length($filterByUser)">
    <xsl:call-template name="count-slots">
      <xsl:with-param name="nodeList" select="//job_info/queue_info/job_list[JB_owner=$filterByUser]"/>
    </xsl:call-template>
  </xsl:when>
  <xsl:otherwise>
    <xsl:call-template name="count-slots">
      <xsl:with-param name="nodeList" select="//job_info/queue_info/job_list"/>
    </xsl:call-template>
  </xsl:otherwise>
  </xsl:choose>
</xsl:variable>

<blockquote>
<xsl:choose>
<xsl:when test="$AJ_total &gt; 0">
  <!-- active jobs: -->
  <table class="listing">
    <tr valign="middle">
    <td>
      <div class="tableCaption">
        <xsl:value-of select="$AJ_total"/> active jobs
        <xsl:if test="string-length($filterByUser)">
          for <em><xsl:value-of select="$filterByUser"/></em>
        </xsl:if>
        (<xsl:value-of select="$AJ_slots"/> slots)
      </div>
      <!-- show/hide activeJobTable via javascript -->
      <xsl:call-template name="toggleElementVisibility">
        <xsl:with-param name="name"  select="'activeJobTable'"/>
      </xsl:call-template>
    </td>
    </tr>
  </table>
  &newline;
  <xsl:apply-templates select="//job_info/queue_info" />
</xsl:when>
<xsl:otherwise>
  <!-- no active jobs -->
  <div class="skipTableFormat">
    <img alt="*" src="css/screen/list_bullet.png" />
      no active jobs
      <xsl:if test="string-length($filterByUser)">
        for <em><xsl:value-of select="$filterByUser"/></em>
    </xsl:if>
  </div>
</xsl:otherwise>
</xsl:choose>
</blockquote>

&newline;
<xsl:comment> Pending Jobs </xsl:comment>
&newline;

<!--
   | count pending jobs/slots for user or everyone
   | we must count the slots ourselves, since pending job tasks are grouped together
   -->
<xsl:variable name="PJ_total">
  <xsl:choose>
  <xsl:when test="string-length($filterByUser)">
    <xsl:value-of select="count(//job_info/job_info/job_list[JB_owner=$filterByUser])"/>
  </xsl:when>
  <xsl:otherwise>
    <xsl:value-of select="count(//job_info/job_info/job_list)"/>
  </xsl:otherwise>
  </xsl:choose>
</xsl:variable>
<xsl:variable name="PJ_slots">
  <xsl:choose>
  <xsl:when test="string-length($filterByUser)">
    <xsl:call-template name="count-slots">
      <xsl:with-param name="nodeList" select="//job_info/job_info/job_list[JB_owner=$filterByUser]"/>
    </xsl:call-template>
  </xsl:when>
  <xsl:otherwise>
    <xsl:call-template name="count-slots">
      <xsl:with-param name="nodeList" select="//job_info/job_info/job_list"/>
    </xsl:call-template>
  </xsl:otherwise>
  </xsl:choose>
</xsl:variable>

<blockquote>
<xsl:choose>
<xsl:when test="$PJ_total &gt; 0">
  <!-- pending jobs: -->
  <table class="listing">
    <tr valign="middle">
    <td>
      <div class="tableCaption">
        <xsl:value-of select="$PJ_total"/> pending jobs
        <xsl:if test="string-length($filterByUser)">
          for <em><xsl:value-of select="$filterByUser"/></em>
        </xsl:if>
        (<xsl:value-of select="$PJ_slots"/> slots)
      </div>
      <!-- show/hide pendingJobTable via javascript -->
      <xsl:call-template name="toggleElementVisibility">
        <xsl:with-param name="name" select="'pendingJobTable'"/>
      </xsl:call-template>
    </td>
    </tr>
  </table>
  &newline;
  <xsl:apply-templates select="//job_info/job_info" />
</xsl:when>
<xsl:otherwise>
  <!-- no pending jobs -->
  <div class="skipTableFormat">
    <img alt="*" src="css/screen/list_bullet.png" />
    no pending jobs
    <xsl:if test="string-length($filterByUser)">
      for user <em><xsl:value-of select="$filterByUser"/></em>
    </xsl:if>
  </div>
</xsl:otherwise>
</xsl:choose>
</blockquote>
</xsl:if>

<!-- bottom status bar with rendered time -->
<xsl:call-template name="bottomStatusBar">
  <xsl:with-param name="timestamp" select="$timestamp" />
</xsl:call-template>

&newline;
</div>
</body>
&newline;
<xsl:comment> javascript tricks after loading body </xsl:comment>
&newline;
<script type="text/javascript">
   // hide elements based on the cookie values
   hideDivFromCookie("activeJobTable");
   hideDivFromCookie("pendingJobTable");

   // expose toggle elements that rely on javascript
   document.getElementById("activeJobTableToggle").style.visibility = "visible";
   document.getElementById("pendingJobTableToggle").style.visibility = "visible";
</script>

</html>
<!-- end body/html -->
</xsl:template>


<!--
  active jobs: header
 -->
<xsl:template match="job_info/queue_info">

  &newline;
  <div id="activeJobTable">
    <table class="listing">
    <tr>
      <th>jobId</th>
      <th>owner</th>
      <th>name</th>
      <th>slots</th>
      <th>tasks</th>
      <th>queue</th>
      <th><abbr title="priority">startTime</abbr></th>
      <th>state</th>
    </tr>
    &newline;
    <xsl:for-each select="job_list[@state='running']">
      <!-- sorted by job number and task -->
      <xsl:sort select="JB_job_number"/>
      <xsl:sort select="tasks"/>
      &newline;
      <xsl:apply-templates select="."/>
    </xsl:for-each>
    </table>
  </div>
  &newline;
</xsl:template>

<!--
  active jobs: contents
 -->
<xsl:template match="job_list[@state='running']">
<!-- per user sort -->
<xsl:if test="not(string-length($filterByUser)) or JB_owner=$filterByUser">

  <tr>
  <!-- jobId with resource requests -->
  <!-- link jobId to details: "jobinfo?jobid={jobId}" -->
  <td>
    <xsl:element name="a">
      <xsl:attribute name="title">
        <xsl:for-each select="hard_request">
          <xsl:value-of select="@name"/>=<xsl:value-of select="."/>
          &space;
        </xsl:for-each>
      </xsl:attribute>
      <xsl:attribute name="href">
        <xsl:text>jobinfo</xsl:text>
        <xsl:value-of select="$urlExt"/>
        <xsl:text>?jobid=</xsl:text>
        <xsl:value-of select="JB_job_number"/>
      </xsl:attribute>
      <xsl:value-of select="JB_job_number" />
    </xsl:element>
  </td>
  <!-- owner -->
  <td>
    <!-- link owner names to "jobs?user={owner}" -->
    <xsl:element name="a">
      <xsl:attribute name="title">
        <xsl:text>view jobs owned by </xsl:text>
        <xsl:value-of select="JB_owner"/>
      </xsl:attribute>
      <xsl:attribute name="href">
        <xsl:text>jobs</xsl:text>
        <xsl:value-of select="$urlExt"/>?user=<xsl:value-of select="JB_owner"/>
      </xsl:attribute>
      <xsl:value-of select="JB_owner" />
    </xsl:element>
  </td>
  <!-- name and full name -->
  <td>
    <xsl:call-template name="shortName">
      <xsl:with-param name="name" select="full_job_name"/>
    </xsl:call-template>
  </td>
  <!-- slots -->
  <td>
    <xsl:value-of select="slots" />
  </td>
  <!-- task -->
  <td>
    <xsl:value-of select="tasks" />
  </td>
  <!-- queue -->
  <td>
    <xsl:call-template name="unqualifiedQueue">
      <xsl:with-param name="queue" select="queue_name"/>
    </xsl:call-template>
  </td>
  <!-- startTime with priority-->
  <td>
    <xsl:element name="abbr">
      <xsl:attribute name="title">
        <xsl:value-of select="JAT_prio"/>
      </xsl:attribute>
      <xsl:value-of select="JAT_start_time" />
    </xsl:element>
  </td>
  <!-- state : with link to residuals -->
  <td>
    <xsl:value-of select="state" />
    <xsl:if test="string-length($viewlog)">
      <xsl:apply-templates select="." mode="viewlog"/>
    </xsl:if>
  </td>
  </tr>
&newline;
</xsl:if>
</xsl:template>


<!--
  pending jobs: header
 -->
<xsl:template match="//job_info/job_info">
  &newline;
  <div id="pendingJobTable">
    <table class="listing">
    <tr>
      <th>jobId</th>
      <th>owner</th>
      <th>name</th>
      <th>slots</th>
      <th>tasks</th>
      <th>queue</th>
      <th><abbr title="submissionTime">priority</abbr></th>
      <th>state</th>
    </tr>
    <xsl:for-each select="job_list[@state='pending']">
      <!-- sorted by priority and job number -->
      <xsl:sort select="JAT_prio" order="descending"/>
      <xsl:sort select="JB_job_number"/>
      <xsl:apply-templates select="."/>
    </xsl:for-each>
    </table>
  </div>
  &newline;
</xsl:template>

<!--
  pending jobs: content
 -->
<xsl:template match="job_list[@state='pending']">
<!-- per user sort -->
<xsl:if test="not(string-length($filterByUser)) or JB_owner=$filterByUser">

  <tr>
  <!-- jobId with resource requests -->
  <!-- link jobId to details: "jobinfo?jobid={jobId}" -->
  <td>
    <xsl:element name="a">
      <xsl:attribute name="title">
        <xsl:for-each select="hard_request">
          <xsl:value-of select="@name"/>=<xsl:value-of select="."/>
          &space;
        </xsl:for-each>
      </xsl:attribute>
      <xsl:attribute name="href">
        <xsl:text>jobinfo</xsl:text>
        <xsl:value-of select="$urlExt"/>
        <xsl:text>?jobid=</xsl:text>
        <xsl:value-of select="JB_job_number"/>
      </xsl:attribute>
      <xsl:value-of select="JB_job_number" />
    </xsl:element>
  </td>
  <!-- owner -->
  <td>
    <!-- link owner names to "jobs?user={owner}" -->
    <xsl:element name="a">
      <xsl:attribute name="title">
        <xsl:text>view jobs owned by </xsl:text>
        <xsl:value-of select="JB_owner"/>
      </xsl:attribute>
      <xsl:attribute name="href">
        <xsl:text>jobs</xsl:text>
        <xsl:value-of select="$urlExt"/>
        <xsl:text>?user=</xsl:text>
        <xsl:value-of select="JB_owner"/>
      </xsl:attribute>
      <xsl:value-of select="JB_owner" />
    </xsl:element>
  </td>
  <!-- name and full name -->
  <td>
    <xsl:call-template name="shortName">
      <xsl:with-param name="name" select="full_job_name"/>
    </xsl:call-template>
  </td>
  <!-- slots -->
  <td>
    <xsl:value-of select="slots" />
  </td>
  <!-- task -->
  <td>
    <xsl:value-of select="tasks" />
  </td>
  <!-- queue -->
  <td>
    <xsl:for-each select="hard_req_queue">
      <xsl:call-template name="unqualifiedQueue">
        <xsl:with-param name="queue" select="."/>
      </xsl:call-template>
      &space;
    </xsl:for-each>
  </td>
  <!-- priority with submissionTime-->
  <td>
    <xsl:element name="abbr">
      <xsl:attribute name="title">
        <xsl:value-of select="JB_submission_time"/>
      </xsl:attribute>
    <xsl:value-of select="JAT_prio" />
    </xsl:element>
  </td>
  <!-- state -->
  <td>
    <xsl:value-of select="state" />
  </td>
  </tr>
&newline;
</xsl:if>
</xsl:template>


<!--
  create links for viewlog with plots
-->
<xsl:template match="job_list" mode="viewlog">
<xsl:if test="count(hard_request)">
  &newline;

  <!-- comma-separated list of resources -->
  <xsl:variable name="resources">
    <xsl:for-each
        select="hard_request"><xsl:value-of
        select="@name"/>
        <xsl:if test="not(position() = last())">,</xsl:if>
    </xsl:for-each>
  </xsl:variable>

  <xsl:variable name="request">
    <xsl:text>resources=</xsl:text><xsl:value-of select="$resources"/>
    <!-- add cwd where possible (likely only LSF output) -->
    <xsl:if test="JB_cwd">;dir=<xsl:value-of select="JB_cwd"/></xsl:if>
    <!-- distinguish between LSF and GridEngine job ids -->
    <xsl:choose>
    <xsl:when test="$isLSF = 'true'">
      <xsl:text>;lsfjobid=</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>;jobid=</xsl:text>
    </xsl:otherwise>
    </xsl:choose>
    <xsl:value-of select="JB_job_number"/>
    <!-- append task id as required -->
    <xsl:if test="tasks">.<xsl:value-of select="tasks"/></xsl:if>
  </xsl:variable>

  <!-- url viewlog?resources={};jobid={}
     | use lsfjobid= instead for LSF
     -->
  <xsl:element name="a">
    <xsl:attribute name="title">viewlog</xsl:attribute>
    <xsl:attribute name="href">
      <xsl:value-of
          select="$viewlog"/>?<xsl:value-of
          select="$request"/>;<xsl:value-of
          select="$cgi-params"/>
    </xsl:attribute>
    <img alt="[v]" src="css/screen/icons/page_find.png" border="0" />
  </xsl:element>

  <!-- url viewlog?action=plot;resources={};jobid={}
     | use lsfjobid= instead for LSF
     -->
  <xsl:element name="a">
    <xsl:attribute name="title">plotlog</xsl:attribute>
    <xsl:attribute name="href">
      <xsl:value-of
          select="$viewlog"/>?action=plot;<xsl:value-of
          select="$request"/>;<xsl:value-of
          select="$cgi-params"/>
    </xsl:attribute>
    <img alt="[p]" src="css/screen/icons/chart_curve.png" border="0" />
  </xsl:element>

  <!-- url viewlog?action=plot;owner={};resources={resources} -->
  <!-- disabled for LSF since we cannot yet easily gather based on owner -->
  <xsl:if test="$isLSF != 'true'">
    <xsl:element name="a">
      <xsl:attribute name="title">plotlogs</xsl:attribute>
      <xsl:attribute name="href"><xsl:value-of
          select="$viewlog"/>?action=plot;owner=<xsl:value-of
          select="JB_owner"/>;resources=<xsl:value-of
          select="$resources"/>;<xsl:value-of
          select="$cgi-params"/>
      </xsl:attribute>
      <img alt="[P]" src="css/screen/icons/chart_curve_add.png" border="0" />
    </xsl:element>
  </xsl:if>
</xsl:if>
</xsl:template>


</xsl:stylesheet>

<!-- =========================== End of File ============================== -->
