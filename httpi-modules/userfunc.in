# -*- perl -*-  ##<xmlqstat/>## - editor hint
~check MFALSE

User-customizable functions that you can use to change and modify HTTPi's
internal messages, and carry them across upgrades, new in 1.5.

hterror is the central routine. If you want additional customization,
you can also change hterror301 and hterror404. However, hterror's arguments
should not be changed as other subroutines call it for their error handling.

# ------------------------------------------------------------------------------
# Copyright (c) 2009-2012 Mark Olesen
#
# License
#     This file is part of xml-qstat.
#
#     xml-qstat is free software: you can redistribute it and/or modify it under
#     the terms of the GNU Affero General Public License as published by the
#     Free Software Foundation, either version 3 of the License,
#     or (at your option) any later version.
#
#     xml-qstat is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#     or FITNESS FOR A PARTICULAR PURPOSE.
#     See the GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with xml-qstat. If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------

~
~

#!/perl  # provide a shebang for using perl -c -x userfunc.in

sub hterror {
    my ( $errstr, @expl ) = (@_);
    &htcontent( <<"EOF", "text/html" );
<html>
<body>
<h1>$errstr</h1>
@expl
<hr />
<address><a href = "http://httpi.floodgap.com/">httpi/$VERSION</a>
by Cameron Kaiser</address>
</body>
</html>
EOF
}

sub hterror301 {
    &htsponse( 301 => "Moved Permanently" );
    &hthead("Location: @_");
    &hterror( "Resource Moved Permanently",
        qq{This resource has moved <a href="@_">here</a>.} );
    &log;
    exit;
}

# error 404, but optionally with our own message content
sub hterror404 {
    &htsponse( 404 => "Not Found" );
    &hterror( "Not Found",
        @_
        ? "@_"
        : "Cannot resolve resource <b>$::address</b>" );
    &log;
    exit;
}

##<xmlqstat>## - functions for xmlqstat /<webapp> resource handler


#
# xmlqstat 'package'
# ------------------
{
    use warnings;
    use strict;

    sub gridEngineCmd;    # forward declaration

    # define callbacks for GridEngine commands
    # the names correspond both to the internal resource mapping
    # and to the xml file (w/o ending)
    # -----------------
    my %gridEngineQuery = (
        qhost => sub {
            my ($cluster) = @_;
            gridEngineCmd(
                $cluster,    #
                qhost => qw( -xml -q -j )
            );
        },
        qstat => sub {
            my ($cluster) = @_;
            gridEngineCmd(
                $cluster,    #
                qstat => qw( -xml -u * -r -s prs )
            );
        },
        qstatf => sub {
            my ($cluster) = @_;
            gridEngineCmd(
                $cluster,    #
                qstat => qw( -xml -u * -r -f -explain aAcE ),
                ( -F => "load_avg,num_proc" )
            );
        },
        qstatj => sub {
            my ( $cluster, $jobid ) = @_;
            $jobid and $jobid =~ /^\d+(,\d+)*$/ or $jobid = '*';

            gridEngineCmd(
                $cluster,    #
                qstat => qw( -xml -j ),
                $jobid
            );
        },
    );

    #
    # hashed values of the configuration,
    # extracted from config/config-{SITE}.xml or config/config.xml
    #
    my %config = (
        cluster => {},       # known cluster configurations
        timeout => {},       # timeouts (http | shell)
        name    => '',       # name of the config file used (site or generic)
        mtime   => 0,        # modification time of the config file
    );

    #
    # internal utility FUNCTION
    # Parse XML attributes function
    #
    # extract attrib="value" ... attrib="value"
    #
    # Return: hash of attributes
    #
    sub _Func_parseXMLattrib {
        my ($str) = @_;
        defined $str or $str = '';

        my %attr;
        while ($str =~ s{^\s*(\w+)=\"([^\"]*)\"}{}s
            or $str =~ s{^\s*(\w+)=\'([^\']*)\'}{}s )
        {
            $attr{$1} = $2;
        }

        %attr;
    }

    #
    # internal FUNCTION
    # reset %config
    #
    sub _Func_resetConfig {
        %config = (
            cluster => {},
            timeout => {},
            name    => '',
            mtime   => 0,
            @_
        );
    }

    #
    # parse request string for named parameters
    #
    # Prototype parseRequestString(query-string)
    # -------------------------------------------------
    sub parseRequestString {
        my ($str) = @_;
        my %param;

        defined $str or $str = '';
        for ( grep { defined and length } split /[\&;]/, $str ) {
            ## decode chars, eg %20 -> space etc
            s{%([\dA-Fa-f]{2})}{chr hex $1}eg;

            ## remove shell meta-chars
            s{[*?&<>{}\[\]\\\`]}{}g;

            if (/=/) {
                my ( $k, $v ) = split /=/;
                ## remove leading/trailing commas
                $v =~ s{^,+|,+$}{}g;
                $param{$k} = $v;
            }
        }

        return %param;
    }

    #
    # internal FUNCTION
    # Populate %config by parsing config file XML contents (passed via $_)
    #
    sub _Func_populateConfig {
        s{<!--.*?-->\s*}{}sg;    # strip XML comments

        # parse <timeout> .. </timeout>
        # ignore top-level attributes
        if (s{<timeout \s* (?:[^<>]*) > (.+?) </timeout \s*>}{}sx) {
            my ($parse) = ($1);

            for ($parse) {
                ## get integer value from
                #   - <http> .. </http>
                #   - <shell> .. </shell>
                # ignoring any attributes
                while (
                    s{<(http|shell) \s* (?:[^<>]*) >\s* (\d+) \s*</\1\s*>}{}sx)
                {
                    my ( $name, $value ) = ( $1, $2 );
                    $config{timeout}{$name} = $value;
                }
            }
        }

        # parse <clusters> .. </clusters>
        # store top-level attributes as '#cluster'
        if (s{<clusters \s* ([^<>]*) > (.+?) </clusters \s*>}{}sx) {
            my ( $attr, $parse ) = ( $1, $2 );
            my %attr = _Func_parseXMLattrib($attr);
            $config{"#cluster"} = {%attr};

            for ($parse) {
                ## process <cluster .../> and <cluster ...> .. </cluster>
                while (s{<cluster \s+([^<>]+?) />}{}sx
                    or s{<cluster \s+([^<>]+) > (.*?) </cluster>}{}sx )
                {
                    my ( $attr, $content ) = ( $1, $2 );

                    my %attr = _Func_parseXMLattrib($attr);
                    my $name = delete $attr{name};

                    if ( defined $name ) {
                        $config{cluster}{$name} = {%attr};
                    }
                }

                ## handle <default ... /> separately
                my ( $name, %attr ) = ("default");

                if (   s{<default \s+([^<>]+?) />}{}sx
                    or s{<default \s+([^<>]+) > (.*?) </default>}{}sx )
                {
                    my ( $attr, $content ) = ( $1, $2 );
                    %attr = _Func_parseXMLattrib($attr);

                    # remove unneed/unwanted attributes
                    delete $attr{name};
                }

                my $enabled = delete $attr{enabled};
                if ( $enabled and $enabled eq "false" ) {
                    %attr = ();
                }
                else {
                    $config{cluster}{default} = {%attr};
                }
            }
        }
    }

    #
    # get cluster settings from one of these files:
    # 1. config/config-{SITE}.xml
    # 2. config/config.xml
    #
    sub updateConfig {
        ( my $site = $::server_host ) =~ s{\..*$}{};

        my @config = ( "config-$site", "config" );
        shift @config if not $site;

        my ( $mtime, $whichConfig );

        for my $config (@config) {
            my $configFile = "$webappPath/config/$config.xml";

            ($mtime) = ( lstat $configFile )[9] || 0;
            if ( $mtime and -f $configFile ) {
                $whichConfig = $config;    # can use this config file

                # handle name change from previous
                _Func_resetConfig() if $config{name} ne "$config";
                last;
            }
            else {
                ## can NOT use this config file
                _Func_resetConfig() if $config{name} eq "$config";
            }
        }

        # mtime is correct only when whichConfig is also set
        if ( $mtime and $whichConfig ) {
            my $configFile = "$webappPath/config/$whichConfig.xml";

            if ( $mtime > $config{mtime} ) {
                _Func_resetConfig( name => $whichConfig, mtime => $mtime );

                local ( *CONFIG, $_, $/ );    ## use slurp mode
                if ( open CONFIG, $configFile ) {
                    $_ = <CONFIG>;
                    _Func_populateConfig();
                }
            }
        }
        else {
            _Func_resetConfig();
        }
    }

    #
    # output <?xml .. ?> processing-instruction
    # with mozilla-style <?xslt-param name=.. ?> processing-instructions
    # and  <?stylesheet ... ?> processing-instruction
    #
    # Prototype xmlProlog( param => value, ... )
    # ---------------------------------------------
    sub xmlProlog {
        my %xsltParam = @_;

        # special treatment for these
        my $encoding = delete $xsltParam{encoding} || "utf-8";
        my $disabled   = delete $xsltParam{rawxml} ? "disabled-" : "";
        my $stylesheet = delete $xsltParam{stylesheet};

        my $prolog = qq{<?xml version="1.0" encoding="$encoding"?>\n};
        for ( keys %xsltParam ) {
            if ( defined $xsltParam{$_} and length $xsltParam{$_} ) {
                $prolog .=
                  qq{<?xslt-param name="$_" value="$xsltParam{$_}"?>\n};
            }
        }

        if ($stylesheet) {
            $prolog .=
qq{<?${disabled}xml-stylesheet type="text/xml" href="$stylesheet"?>\n};
        }

        $prolog;
    }

    #
    # simple wrapper to join the args and return text/xml
    # without forgetting to log and exit
    # ---------------------------------------------
    sub returnXML {
        &htsponse( 200 => "OK" );
        &htcontent( join( '' => @_ ), "text/xml" );

        &log;
        exit;
    }

    #
    # get xml content from an file and stripping the <?xml ... ?>
    # processing-instructions, since the file contents are likely to be
    # inserted after a stylesheet instruction
    #
    # Prototype xmlFromFile( fileName )
    # ---------------------------------------------
    sub xmlFromFile {
        my ($fileName) = @_;

        my $content;
        local ( *XMLFILE, $/ );    ## slurp mode
        if ( open XMLFILE, "$webappPath/$fileName" ) {
            $content = <XMLFILE>;

            # strip <?xml version="1.0" encoding="utf-8"?>}
            $content =~ s{^\s*<\?xml[^?]+\?>\s*}{}sx;

            # we could also do a simple check for non-truncated content
        }

        $content ? $content : "<fileNotFound>$_</fileNotFound>\n";
    }

    #
    # provide similar output to Apache Cocoon Directory Generator
    # but with depth=1 and limited to (png|xml|xsl) files
    # didn't bother full compatibility, attributes etc, since none of
    # it is used in our transformations
    #
    # also don't bother sorting the entries
    # ---------------------------------------------
    sub directoryGenerator {
        my ($dir) = @_;

        my $content = '';
        local (*DIR);
        if ( opendir DIR, "$webappPath/$dir" ) {
            while ( my $f = readdir DIR ) {
                if ( -f "$webappPath/$dir/$f" and $f =~ /^.+\.(png|xml|xsl)$/ )
                {
                    $content .= qq{<dir:file name="$f"/>\n};
                }
            }
        }

        return <<"CONTENT";
<dir:directory xmlns:dir="http://apache.org/cocoon/directory/2.0"
    name="$dir">
$content
</dir:directory>
CONTENT
    }

    # special purpose Directory Generator
    #
    # max depth=2, limit first level to cache, cache-* directories
    # and limit second level to (xml) files only
    #
    # also don't bother sorting the entries
    # ---------------------------------------------
    sub directoryGeneratorCacheFiles {

        my $content = '';
        local (*DIR);
        if ( opendir DIR, $webappPath ) {
            while ( my $subDir = readdir DIR ) {
                my $thisDir = "$webappPath/$subDir";
                if ( $subDir =~ /^cache(-.+)?$/ and -d $thisDir ) {
                    $content .= qq{<dir:directory name="$subDir">\n};

                    local (*SUBDIR);
                    if ( opendir SUBDIR, $thisDir ) {
                        while ( my $f = readdir SUBDIR ) {
                            if ( $f =~ /^.+\.xml$/ and -f "$thisDir/$f" ) {
                                $content .= qq{<dir:file name="$f"/>\n};
                            }
                        }
                    }
                    $content .= qq{</dir:directory>\n};
                }
            }
        }

        return <<"CONTENT";
<dir:directory xmlns:dir="http://apache.org/cocoon/directory/2.0"
    name="cache">
$content
</dir:directory>
CONTENT
    }

    #
    # get a xml/html etc via HTTP
    # - ideas taken from LWP::Simple, but without IO::Socket.pm
    #
    # Return: [ \@response, \%header, $buf ];
    #
    sub getHTTP {
        my ($url) = @_;
        my $timeout = $config{timeout}{http} || $timeout{http} || 10;

        my ( $proto, $host, $port, $path ) =
          ( $url =~ m{^(https?)://([^/:\@]+)(?::(\d+))?(/\S*)?$} )
          or return undef;

        $port or $port = $proto eq "https" ? 443 : 80;

        if ($path) {
            $path =~ s{//+}{/}g;
        }
        else {
            $path = "/";
        }

        my $ipaddr = gethostbyname $host;

# If we are paranoid, we can add this check:
## avoid internal loops
#         my $serverIPaddr = gethostbyname $::server_host;
#         if ( $port == $::server_port and $ipaddr eq $serverIPaddr ) {
#             &hterror404(<<"ERROR");
# Potential circular reference in request
# <blockquote><pre>
# From: $::server_host:$::server_port
# To:   $host:$port
# </pre></blockquote>
# ERROR
#         }

        local *SOCK;

        # use httpi DEF_* constants:
        my $packaddr = pack $::sockaddr, DEF_AF_INET, $port, $ipaddr;
        socket SOCK, DEF_PF_INET, DEF_SOCK_STREAM, DEF_IPPROTO_TCP;
        connect SOCK, $packaddr or return undef;

        # use syswrite to avoid buffering
        syswrite SOCK,
          join(
            "\015\012" => "GET $path HTTP/1.0",
            "Host: $host",
            "User-Agent: HTTPi/$::VERSION",
            "",
            ""
          );

        ## get buffer, handle timeout too
        my ( $buf, $n ) = ( "", undef );
        local $SIG{'__DIE__'} = sub { undef $n; };
        eval {
            local $SIG{ALRM} = sub { die "TIMEOUT\n"; };    # NB: '\n' required
            alarm $timeout;

            1 while $n = sysread( SOCK, $buf, 8 * 1024, length($buf) );
            alarm 0;
        };

        defined $n or return undef;

        $buf =~ s{^HTTP/(\d+\.\d+)\s+(\d+)\s*([^\012\015]*)\015?\012}{}
          or return undef;

        # http-version, status and message
        my ( $ver, @response ) = ( $1, $2, $3 );

        # only deal with status "200 OK"
        $response[0] == 200 or return &hterror404(<<"ERROR");
Remote server reported status
<blockquote><pre>HTTP/$ver @response</pre></blockquote>
on <blockquote><pre>GET $path</pre></blockquote>
ERROR

        # remove header, but extract information too
        $buf =~ s{^(.+?)\015?\012\015?\012}{}s or return undef;
        my $head = $1;

        # extract Content-Type from header
        my %header;
        for ( split /\015?\012/, $head ) {
            if ( my ($v) = m{^Content-Type:\s*(.+?)\s*$}i ) {
                $header{'Content-Type'} = $v;
                last;
            }
        }

        # calculate Content-Length
        $header{'Content-Length'} = length $buf;

        return [ \@response, \%header, $buf ];
    }

    #
    # execute a shell-type of command with a error 404 on timeout or other error
    #
    # ---------------------------------------------
    sub shellCmd {
        my (@command) = @_;
        my $timeout = $config{timeout}{shell} || $timeout{shell} || 5;

        if ( not @command ) {
            my ( $line, $sub ) = ( caller(1) )[ 2, 3 ];

            return &hterror404(<<"ERROR");
$sub (line $line): shell-cmd with an undefined query
ERROR
        }

        my ( @lines, $redirected, $pid );

        # die handler for timeouts etc
        local $SIG{'__DIE__'} = sub {
            kill 9, $pid if $pid;    # kill off truant child as well

            &hterror404(<<"ERROR");
Resource <blockquote><pre>$::address</pre></blockquote>
Timeout ($timeout sec) or error when executing command:
<blockquote><pre>@command</pre></blockquote>
ERROR
        };

        # command evaluation
        local ( *OLDERR, $@ );
        eval {
            local $SIG{ALRM} = sub { die "TIMEOUT\n"; };    # NB: '\n' required
            alarm $timeout;

            local *PIPE;
            open OLDERR, ">&", \*STDERR and $redirected++;
            open STDERR, ">/dev/null";

            # open without shell (fork)
            $pid = open PIPE, '-|', @command;
            if ($pid) {
                @lines = <PIPE>;
            }
            close PIPE;

            die "(EE) ", @lines if $?;
            alarm 0;
        };

        # restore stderr
        open STDERR, ">&OLDERR" if $redirected;

        # eval errors are handled via the previous die handler
        wantarray ? @lines : join '' => @lines;
    }

    #
    # Execute <sge_root>/bin/<arch>/cmd with a timeout.
    # For security, only allow absolute paths.
    #
    # Prototype gridEngineCmd( clusterName, command => [command args] )
    #
    # %config must be up-to-date before calling
    # ---------------------------------------------
    sub gridEngineCmd {
        my ( $cluster, $cmd, @cmdArgs ) = @_;
        my ( $root, $cell, $arch );

        ## programming error
        $cmd or return &hterror404(<<"ERROR");
gridEngineCmd called without a command - this is a programming error
ERROR

        $cluster ||= '';

        # get root/cell from config information,
        # allow 'default' to use pre-configured value
        if (    exists $config{cluster}{$cluster}
            and exists $config{cluster}{$cluster}{root} )
        {
            $root = $config{cluster}{$cluster}{root};
            $cell = $config{cluster}{$cluster}{cell};
            $arch = $config{cluster}{$cluster}{arch};
        }
        elsif ( $cluster eq "default" ) {
            $root = $sge_root;
            $cell = $config{cluster}{$cluster}{cell};
            $arch = $config{cluster}{$cluster}{arch};
        }

        # fallbacks, from <clusters> attributes or hard-coded values
        $root ||= '';
        $cell ||= $config{"#cluster"}{cell} || "default";
        $arch ||= $config{"#cluster"}{arch} || $sge_arch;

        # need root + cell directory
        -d $root and $root =~ m{^/} and -d "$root/$cell"
          or &hterror404(<<"ERROR");
Resource <blockquote><pre>$::address</pre></blockquote>
Root or Cell directory does not exist for cluster <em>$cluster</em>
<blockquote><pre>
SGE_ROOT="$root"
SGE_CELL="$cell"
arch="$arch"
</pre></blockquote>
while executing command:
<blockquote><pre>$cmd @cmdArgs</pre></blockquote>
ERROR

        #
        # resolve cmd in the <sge_root>/bin/<arch>/ directory
        #
        my $cmdPath = "$root/bin/$arch/$cmd";

        -f $cmdPath and -x _ or &hterror404(<<"ERROR");
Resource<blockquote><pre>$::address</pre></blockquote>
For cluster <em>$cluster</em>
<blockquote><pre>
SGE_ROOT="$root"
SGE_CELL="$cell"
arch="$arch"
</pre></blockquote>
Could not resolve command
<blockquote><pre>
$root/bin/$arch/
$cmd @cmdArgs
</pre></blockquote>
ERROR

        # localizing is a good idea, but seems to fail?!
        $ENV{SGE_ROOT} = $root;
        $ENV{SGE_CELL} = $cell;

        my $libDir = "$root/lib/$arch";
        if ( $libEnvName and -d $libDir ) {
            $ENV{$libEnvName} = $libDir;
        }

        # execute shell command
        my $content = shellCmd( $cmdPath, @cmdArgs );

        $content =~ s{</*>\s*}{}g if $content;    # cleanup incorrect XML
        $content;
    }

    #
    # Search cache-{clusterName}/ and cache/ for cache files. If this
    # fails, attempt the fallback command.
    # If the first parameter of the fallback command is a code reference,
    # call directly with the remaining arguments.
    #
    # Prototype xmlFromCache( clusterName, cacheName, [command] )
    #
    # ---------------------------------------------
    sub xmlFromCache {
        my ( $cluster, $cacheName, $altCmd ) = @_;

        $cacheName =~ s{\.xml$}{};

        my $cacheFile;
        for (
              ( not $cluster or $cluster eq "default" )
            ? ("cache/$cacheName")
            : ( "cache-$cluster/$cacheName", "cache/$cacheName~$cluster" )
          )
        {
            my $x = "$webappPath/$_.xml";

            if ( -f $x ) {
                $cacheFile = $x;
                last;
            }
        }

        my $content;

        if ($cacheFile) {
            local ( *XMLFILE, $/ );    ## slurp mode
            if ( open XMLFILE, $cacheFile ) {
                $content = <XMLFILE>;
            }
        }
        elsif ( $cluster
            and exists $config{cluster}{$cluster}
            and exists $config{cluster}{$cluster}{baseURL} )
        {
            ## url may or may not have trailing slash
            ( my $url = "$config{cluster}{$cluster}{baseURL}" ) =~ s{/+$}{};
            $url .= "/$cacheName.xml";

            ## also pass through the query string
            if ($::variables) {
                $url .= "?$::variables";
            }

            my $got = getHTTP($url);
            if ( ref $got eq "ARRAY" ) {
                $content = $got->[2];
            }
            else {
                &hterror404(<<"ERROR");
Error while fetching <blockquote><pre>$url</pre></blockquote>
ERROR
            }
        }
        elsif ( ref $altCmd eq "ARRAY" ) {
            my ( $cmd, @cmdArgs ) = @$altCmd;

            if ( ref $cmd eq "CODE" ) {
                ## code ref gets called directly
                $content = &$cmd(@cmdArgs);
            }
            else {
                ## array ref gets called via command generator
                $content = shellCmd( $cmd, @cmdArgs );
            }
        }

        if ($content) {
            ## strip <?xml ...?> # or have problems later!
            $content =~ s{^\s*<\?xml[^?]+\?>\s*}{}sx;

            # we could also do a simple check for non-truncated content?
        }
        else {
            &hterror404(<<"ERROR");
Cannot resolve resource <blockquote><pre>$::address</pre></blockquote>
ERROR
        }

        $content;
    }

    #
    # resource handler for /<webapp> path
    #
    # globals used/adjusted:
    #   - $::address
    #   - $::path
    # ------------------------------
    sub resource_xmlqstat {

        # retrieve named parameters, place in %param
        my %param = parseRequestString($::variables);

        # basic xslt parameters
        my %xsltParam = (
            timestamp  => POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime ),
            serverName => $::server_host,
        );

        #
        # direct serving of qhost/qstat information
        # These can be provided without the xslt files
        # --------------------------------------------
        #    /qhost.xml
        #    /qstat.xml
        #    /qstatf.xml
        #    /qstatj.xml
        #
        if ( $::address =~ m{^/(qhost|qstat[fj]?)\.xml$} ) {
            my ( $function, $clusterName ) = ( $1, "default" );
            if ( exists $gridEngineQuery{$function} ) {

                # update - could be useful for caching
                updateConfig();

                returnXML(
                    xmlProlog(%xsltParam),
                    xmlFromCache(    #
                        $clusterName,    #
                        $function =>
                          [ $gridEngineQuery{$function}, $clusterName ]
                    ),
                );
            }

            return;
        }

        # trivial check - not even our resource
        return if $::address !~ m{$webappRE(?:/|$)};

        #
        # Fundamental re-direct rules first
        # ---------------------------------

        #    /<webapp>
        # or /<webapp>/cluster
        # or /<webapp>/cluster/
        # -> /<webapp>/
        if ( $::address =~ m{$webappRE(/cluster/*)?$} ) {
            &hterror301("/$webappName/");
        }

        # the file paths must exist
        # give diagnosis of what is missing or mis-configured:
        -d $webappPath or &hterror404(<<"ERROR");
Possible installation error for handler
<blockquote><pre>/$webappName/</pre></blockquote>
The underlying web-app path:
<blockquote><pre>$webappPath</pre></blockquote>
does not seem to exist.
ERROR

        # silently disable stylesheets if the xsl/ directory is missing
        # this can help with minimal installations
        -d "$webappPath/xsl" or $xsltParam{rawxml} = "true";

        # stylesheets can be disabled upon request
        if ( defined $param{rawxml} and $param{rawxml} eq "true" ) {
            $xsltParam{rawxml} = "true";
        }

        #
        # re-direct rules first
        # ---------------------

        #    /<webapp>/cluster/{clusterName}
        # -> /<webapp>/cluster/{clusterName}/jobs
        if ( $::address =~ m{$webappRE/cluster/([^\s/]+?)/*$} ) {
            $::address =~ s{/+$}{};

            # redirect everything, let the target catch any errors
            &hterror301("$::address/jobs");
        }

        # path rewriting for static files - remap relative paths transparently
        #
        #    /<webapp>/.../css/.../*.(css|png)
        #    /<webapp>/..../javascript/*.js
        #    /<webapp>/..../xsl/*.xsl
        # etc
        # -> /<webapp>/css/.../*.(css|png) etc
        #
        # or serve cache file directly
        #
        if (
            $::address =~ m{$webappRE/.*
                  (
                      /(?:config|css|javascript|x[ms]l)/
                      .+\.(?:css|js|png|x[ms]l)
                  )
                  $}x
            or $::address =~ m{$webappRE(/cache/[^\s/]+\.xml)$}
            or $::address =~ m{$webappRE(/cache-[^\s/]+/[^\s/]+\.xml)$}
          )
        {
            $::path    = $webappPath;
            $::address = $1;

            return;    # done rewriting
        }

        #
        #  /<webapp>/
        #  /<webapp>/index.xml
        #
        if ( $::address =~ m{$webappRE/(?:index(\.xml))?$} ) {
            $xsltParam{urlExt} = $1 if $1;

            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    "server-info" => "HTTPi/$::VERSION",
                    stylesheet    => "xsl/index-xhtml.xsl",
                ),
                directoryGeneratorCacheFiles()
            );
        }

        #
        # create directory listing
        #  /<webapp>/cache
        #
        if ( $::address =~ m{$webappRE/cache$} ) {
            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    dir        => "cache",
                    stylesheet => "xsl/directory-xhtml.xsl"
                ),
                directoryGeneratorCacheFiles()
            );
        }

        #
        # create directory listing
        #  /<webapp>/config
        #  /<webapp>/xsl
        #
        if ( $::address =~ m{$webappRE/(config|xsl)$} ) {
            my $dir = $1;

            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    stylesheet => "./xsl/directory-xhtml.xsl",
                ),
                directoryGenerator($dir)
            );
        }

        #
        # /<webapp>/info/*
        #
        if ( $::address =~ m{$webappRE/(info/.+)\.html$} ) {
            my $file = "xml/$1.xml";

            returnXML(
                xmlProlog(    #
                    %xsltParam,    #
                    stylesheet => "xsl/info-to-xhtml.xsl",
                ),
                xmlFromFile($file)
            );
        }

        #
        # update what we know about the cluster configuration
        #
        updateConfig();

        #
        # /<webapp>/cluster/{clusterName}/{function}(.xml)
        #
        if ( $::address =~
            m{$webappRE/cluster/([^\s/]+?)/([^\s/]+?)(\.xml)?/*$} )
        {
            my ( $clusterName, $function, $urlExt ) = ( $1, $2, $3 );

            $xsltParam{urlExt}      = $urlExt if $urlExt;
            $xsltParam{clusterName} = $clusterName;

            # redirect for known clusters (excluding "default")
            exists $config{cluster}{$clusterName}
              or &hterror404(<<"ERROR");
Unknown cluster configuration
<blockquote><pre>
$clusterName
</pre></blockquote>
Note that the <em>default</em> cluster cannot be explicitly named
ERROR

            #
            # job : with optional user=... filter
            #
            if ( $function eq "jobs" ) {
                if ( defined $param{user} and $param{user} =~ m{^\w+$} ) {
                    $xsltParam{filterByUser} = $param{user};
                }

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qstat-xhtml.xsl",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qstat => undef
                    ),
                );
            }

            #
            # jobinfo : with optional jobid
            #
            if ( $function eq "jobinfo" ) {
                my $jobid = $param{jobid};

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qstatj-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,    #
                        qstatj =>
                          [ $gridEngineQuery{qstatj}, $clusterName, $jobid ]
                    ),
                );
            }

            #
            # queues : with optional renderMode (summary|free|warn)
            #
            if ( $function eq "queues" ) {
                ( $xsltParam{renderMode} ) =
                  grep { $_ and m{^(summary|free|warn)$} } $param{view};

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qhost-xhtml.xsl",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qhost => undef
                    ),
                );
            }

            #
            # resources : display licenses etc
            #
            if ( $function eq "resources" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,      #
                        stylesheet => "../../xsl/qlic-xhtml.xsl",
                    ),
                    xmlFromCache(        #
                        $clusterName,    #
                        qlicserver => undef,
                    ),
                );
            }

            #
            # cache : display directory of cluster cache files
            #
            if ( $function eq "cache" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,
                        prefix     => ".",
                        stylesheet => "../../xsl/directory-xhtml.xsl",
                    ),
                    directoryGenerator("cache-$clusterName"),
                );
            }

            # *.xml specified - attempt to serve cached file
            if ( delete $xsltParam{urlExt} ) {
                returnXML(
                    xmlProlog(%xsltParam),    #
                    xmlFromCache(             #
                        $clusterName, $function
                    ),
                );
            }

            ## can't be resolved - error404
            &hterror404;
        }

        # top-level rendering again
        # -------------------------

        #
        # special handling for
        # qstatf.xml, qstatf[@~].xml and qstatf[@~]{clusterName}.xml
        #
        if (   $::address =~ m{$webappRE/(qstatf)[@~]([^\s/]*)\.xml$}
            or $::address =~ m{$webappRE/(qstatf)\.xml$} )
        {
            my ( $function, $clusterName ) = ( $1, $2 );

            #
            # raw qstat -f query
            #
            if ( $function eq "qstatf" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        clusterName => $clusterName,
                        rawxml      => "true",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    ),
                );
            }
        }

        #
        #    /<webapp>/(resource|jobs|..)[@~]{clusterName}(.xml)
        # or /<webapp>/(resource|jobs|..)(.xml)
        #
        if (   $::address =~ m{$webappRE/(\w+)[@~]([^\s/]*?)(\.xml)?$}
            or $::address =~ m{$webappRE/(\w+)(\.xml)?$} )
        {
            my ( $function, $clusterName, $urlExt ) = ( $1, $2, $3 );

            $xsltParam{urlExt}      = $urlExt if $urlExt;
            $xsltParam{clusterName} = $clusterName;
            $xsltParam{menuMode}    = "qstatf";

            #
            # job : with optional user=... filter
            #
            if ( $function eq "jobs" ) {
                if ( defined $param{user} and $param{user} =~ m{^\w+$} ) {
                    $xsltParam{filterByUser} = $param{user};
                }

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        renderMode => "jobs",
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    ),
                );
            }

            #
            # jobinfo : with optional jobid
            #
            if ( $function eq "jobinfo" ) {
                my $jobid = $param{jobid};

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "xsl/qstatj-xhtml.xsl",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qstatj =>
                          [ $gridEngineQuery{qstatj}, $clusterName, $jobid ]
                    ),
                );
            }

            #
            # queues : with optional renderMode (summary|free|warn)
            #
            if ( $function eq "queues" ) {
                ( $xsltParam{renderMode} ) =
                  grep { $_ and m{^(summary|free|warn)$} } $param{view};

                # default is "queues", but state it explicitly anyhow
                $xsltParam{renderMode} ||= "queues";

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(      #
                        $clusterName,    #
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    ),
                );
            }

            #
            # report : renderMode 'report'
            #
            if ( $function eq "report" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,      #
                        renderMode => "report",
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(        #
                        $clusterName,    #
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    ),
                );
            }

            #
            # resources : display licenses etc
            #
            if ( $function eq "resources" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,      #
                        stylesheet => "xsl/qlic-xhtml.xsl",
                    ),
                    xmlFromCache(        #
                        $clusterName,    #
                        qlicserver => undef
                    ),
                );
            }

            ## can't be resolved - error404
            &hterror404;
        }

        ## warn "fall-thru with $::address\n";
        $::path = $webappPath;
        $::address =~ s{$webappRE}{};
    }
}


##</xmlqstat>##
# ------------------------------------------------------------------------------
# End of xml-qstat copyright segment.
#
# -----------------------------------------------------------------------------

