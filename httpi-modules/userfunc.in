# -*- perl -*-  ##<xmlqstat/>## - editor hint
~check MFALSE

User-customizable functions that you can use to change and modify HTTPi's
internal messages, and carry them across upgrades, new in 1.5.

hterror is the central routine. If you want additional customization,
you can also change hterror301 and hterror404. However, hterror's arguments
should not be changed as other subroutines call it for their error handling.

# ------------------------------------------------------------------------------
# Copyright 2009-2011 Mark Olesen
#
#     This file is part of xml-qstat.
#
#     xml-qstat is free software: you can redistribute it and/or modify it under
#     the terms of the GNU Affero General Public License as published by the
#     Free Software Foundation, either version 3 of the License,
#     or (at your option) any later version.
#
#     xml-qstat is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#     or FITNESS FOR A PARTICULAR PURPOSE.
#     See the GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with xml-qstat. If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------

~
~

#!/perl  # provide a shebang for using perl -c -x userfunc.in

sub hterror {
    my ( $errstr, @expl ) = (@_);
    &htcontent( <<"EOF", "text/html" );
<html>
<body>
<h1>$errstr</h1>
@expl
<hr>
<address><a href = "http://httpi.floodgap.com/">httpi/$VERSION</a>
by Cameron Kaiser</address>
</body>
</html>
EOF
}

sub hterror301 {
    &htsponse( 301 => "Moved Permanently" );
    &hthead("Location: @_");
    &hterror( "Resource Moved Permanently",
        qq{This resource has moved <a href="@_">here</a>.} );
    &log;
    exit;
}

# error 404, but optionally with our own message content
sub hterror404 {
    &htsponse( 404 => "Not Found" );
    &hterror( "Not Found",
        @_
        ? "@_"
        : "Cannot resolve resource <b>$::address</b>" );
    &log;
    exit;
}

##<xmlqstat>## - functions for xmlqstat /<webapp> resource handler


#
# xmlqstat 'package'
# ------------------
{
    use warnings;
    use strict;

    sub gridEngineCmd;                # forward declaration

    # define callbacks for GridEngine commands
    # the names correspond both to the internal resource mapping
    # and to the xml file (w/o ending)
    # -----------------
    my %gridEngineQuery = (
        qhost => sub {
            my ($cluster) = @_;
            gridEngineCmd( $cluster, qhost => qw( -xml -q -j ) );
        },
        qstat => sub {
            my ($cluster) = @_;
            gridEngineCmd( $cluster, qstat => qw( -xml -u * -r -s prs ) );
        },
        qstatf => sub {
            my ($cluster) = @_;
            gridEngineCmd(
                $cluster,
                qstat => qw( -xml -u * -r -f -explain aAcE ),
                ( -F => "load_avg,num_proc" )
            );
        },
        qstatj => sub {
            my ( $cluster, $jobId ) = @_;
            $jobId and $jobId =~ /^\d+$/ or $jobId = '*';

            gridEngineCmd( $cluster, qstat => qw( -xml -j ), $jobId );
        },
    );

    # hashed values of cluster configuration, extracted from config/config.xml
    my %clusterPaths = ( "#mtime#" => 0 );

    #
    # extract attrib="value" ... attrib="value"
    #
    sub parseXMLattrib {
        my $str = shift || '';
        my %attr;

        while ($str =~ s{^\s*(\w+)=\"([^\"]*)\"}{}s
            or $str =~ s{^\s*(\w+)=\'([^\']*)\'}{}s )
        {
            $attr{$1} = $2;
        }

        %attr;
    }

    #
    # ideas from LWP::Simple but without IO::Socket.pm
    #
    sub get_http_source {
        my ($url) = @_;

        my ( $proto, $host, $port, $path ) =
          ( $url =~ m{^(https?)://([^/:\@]+)(?::(\d+))?(/\S*)?$} )
          or return undef;

        $port or $port = $proto eq "https" ? 443 : 80;

        if ($path) {
            $path =~ s{//+}{/}g;
        }
        else {
            $path = "/";
        }

        my $ipaddr       = gethostbyname $host;
        my $serverIPaddr = gethostbyname $::server_host;

        # avoid internal loops
        if ( $port == $::server_port and $ipaddr eq $serverIPaddr ) {
            &hterror404(<<"ERROR");
Potential circular reference in request
<blockquote><pre>
From: $::server_host:$::server_port
To:   $host:$port
</pre></blockquote>
ERROR
        }

        local *SOCK;
        # use httpi DEF_* constants:
        my $packaddr = pack $::sockaddr, DEF_AF_INET, $port, $ipaddr;
        socket SOCK, DEF_PF_INET, DEF_SOCK_STREAM, DEF_IPPROTO_TCP;
        connect SOCK, $packaddr or return undef;

        # use syswrite to avoid buffering
        syswrite SOCK,
          join(
            "\015\012" => "GET $path HTTP/1.0",
            "Host: $host",
            "User-Agent: HTTPi/$::VERSION",
            "",
            ""
          );

        ## get buffer, handle timeout too
        my ( $buf, $n ) = ( "", undef );
        local $SIG{'__DIE__'} = sub { undef $n; };
        eval {
            local $SIG{ALRM} = sub { die "TIMEOUT\n"; };    # NB: '\n' required
            alarm DEF_XMLQSTAT_TIMEOUT;

            1 while $n = sysread( SOCK, $buf, 8 * 1024, length($buf) );
            alarm 0;
        };

        defined $n or return undef;

        $buf =~ s{^HTTP/(\d+\.\d+)\s+(\d+)\s*([^\012\015]*)\015?\012}{}
          or return undef;

        # http-version, status and message
        my ( $ver, @response ) = ( $1, $2, $3 );

        # only deal with status "200 OK"
        $response[0] == 200 or return &hterror404(<<"ERROR");
Remote server reported status
<blockquote><pre>HTTP/$ver @response</pre></blockquote>
on <blockquote><pre>GET $path</pre></blockquote>
ERROR


        # remove header, but extract information too
        $buf =~ s{^(.+?)\015?\012\015?\012}{}s or return undef;
        my $head = $1;

        # extract Content-Type from header
        my %header;
        for ( split /\015?\012/, $head ) {
            if ( my ($v) = m{^Content-Type:\s*(.+?)\s*$}i ) {
                $header{'Content-Type'} = $v;
                last;
            }
        }

        # calculate Content-Length
        $header{'Content-Length'} = length $buf;

        return [ \@response, \%header, $buf ];
    }


    #
    # parse request string
    # placed named parameters in \%param and unnamed parameters in \%switch
    #
    # Prototype parseRequestString( \%param, \%switch )
    # -------------------------------------------------
    sub parseRequestString {
        my ( $param, $switch ) = @_;

        # reset
        %$param  = ();
        %$switch = ();

        if ( defined $::variables ) {
            for ( grep { defined and length } split /[\&;]/, $::variables ) {
                ## decode chars, eg %20 -> space etc
                s{%([\dA-Fa-f]{2})}{chr hex $1}eg;

                ## remove meta-chars
                s{[*?&<>{}\[\]\\\`]}{}g;

                if (/=/) {
                    my ( $k, $v ) = split /=/;
                    ## remove leading/trailing commas
                    $v =~ s{^,+|,+$}{}g;
                    $param->{$k} = $v;
                }
                else {
                    $switch->{$_}++;
                }
            }
        }
    }

    #
    # get cluster settings from config/config.xml file
    #
    sub updateClusterConfig {
        my $configFile = "$webappPath/config/config.xml";

        my ($mtime) = ( lstat $configFile )[9] || 0;

        local ( *CONFIG, $_, $/ );    ## slurp mode
        if (    $mtime
            and $mtime > ( $clusterPaths{"#mtime#"} ||= 0 )
            and -f $configFile
            and open CONFIG, $configFile )
        {

            # reset paths, assign new modification time
            %clusterPaths = ( "#mtime#" => $mtime );

            # slurp file and strip out all xml comments
            $_ = <CONFIG>;
            s{<!--.*?-->\s*}{}sg;

            # only retain content of <clusters> .. </clusters> bit
            s{^.*<clusters>|</clusters>.*$}{}sg;

            ## process <cluster .../> and <cluster ...> .. </cluster>
            while (s{<cluster \s+([^<>]+?) />}{}sx
                or s{<cluster \s+([^<>]+) > (.*?) </cluster>}{}sx )
            {
                my ( $attr, $content ) = ( $1, $2 );

                my %attr = parseXMLattrib($attr);
                my $name = delete $attr{name};

                if ( defined $name ) {
                    $clusterPaths{$name} = {%attr};
                }
            }

            ## handle <default ... />
            my ( $name, %attr ) = ("default");

            if (   s{<default \s+([^<>]+?) />}{}sx
                or s{<default \s+([^<>]+) > (.*?) </default>}{}sx )
            {
                my ( $attr, $content ) = ( $1, $2 );
                %attr = parseXMLattrib($attr);

                # remove unneed/unwanted attributes
                delete $attr{name};
            }

            my $enabled = delete $attr{enabled};
            if ( $enabled and $enabled eq "false" ) {
                %attr = ();
            }
            else {
                $clusterPaths{default} = {%attr};
            }
        }
    }


    #
    # output <?xml .. ?> processing-instruction
    # with mozilla-style <?xslt-param name=.. ?> processing-instructions
    # and  <?stylesheet ... ?> processing-instruction
    #
    # Prototype xmlProlog( param => value, ... )
    # ---------------------------------------------
    sub xmlProlog {
        my %xsltParam = @_;

        # special treatment for these
        my $encoding = delete $xsltParam{encoding} || "utf-8";
        my $disabled   = delete $xsltParam{rawxml} ? "disabled-" : "";
        my $stylesheet = delete $xsltParam{stylesheet};

        my $prolog = qq{<?xml version="1.0" encoding="$encoding"?>\n};
        for ( keys %xsltParam ) {
            if ( defined $xsltParam{$_} and length $xsltParam{$_} ) {
                $prolog .=
                  qq{<?xslt-param name="$_" value="$xsltParam{$_}"?>\n};
            }
        }

        if ($stylesheet) {
            $prolog .=
qq{<?${disabled}xml-stylesheet type="text/xml" href="$stylesheet"?>\n};
        }

        $prolog;
    }


    #
    # simple wrapper to join the args and return text/xml
    # without forgetting to log and exit
    # ---------------------------------------------
    sub returnXML {
        &htsponse( 200 => "OK" );
        &htcontent( join( '' => @_ ), "text/xml" );

        &log;
        exit;
    }

    #
    # get xml content from an file and stripping the <?xml ... ?>
    # processing-instructions, since the file contents are likely to be
    # inserted after a stylesheet instruction
    #
    # Prototype xmlFromFile( fileName )
    # ---------------------------------------------
    sub xmlFromFile {
        my ($fileName) = @_;
        my $mainDir = $webappPath;

        my $content;

        local ( *XMLFILE, $/ );    ## slurp mode
        if ( open XMLFILE, "$mainDir/$fileName" ) {
            $content = <XMLFILE>;

            # strip <?xml version="1.0" encoding="utf-8"?>}
            $content =~ s{^\s*<\?xml[^?]+\?>\s*}{}sx;

            # we could also do a simple check for non-truncated content
        }

        $content ? $content : "<fileNotFound>$_</fileNotFound>\n";
    }

    #
    # provide similar output to Apache Cocoon Directory Generator
    # but with depth=1 and limited to (png|xml|xsl) files
    # didn't bother full compatibility, attributes etc, since none of
    # it is used in our transformations
    #
    # also don't bother sorting the entries
    # ---------------------------------------------
    sub directoryGenerator {
        my $mainDir = $webappPath;
        my ($src) = @_;

        my $content =
qq{<dir:directory xmlns:dir="http://apache.org/cocoon/directory/2.0" name="$src">\n};

        local ( *DIR, *SUBDIR );
        if ( opendir DIR, "$mainDir/$src" ) {
            while ( my $f = readdir DIR ) {
                if ( -f "$mainDir/$src/$f" and $f =~ /^.+\.(png|xml|xsl)$/ ) {
                    $content .= qq{<dir:file name="$f"/>\n};
                }
            }
        }

        qq{$content</dir:directory>\n};
    }


    # special purpose Directory Generator
    #
    # max depth=2, limit first level to cache, cache-* directories
    # and limit second level to (xml) files only
    #
    # also don't bother sorting the entries
    # ---------------------------------------------
    sub directoryGeneratorCacheFiles {
        my $mainDir = $webappPath;

        my $content =
qq{<dir:directory xmlns:dir="http://apache.org/cocoon/directory/2.0">\n};

        local ( *DIR, *SUBDIR );
        if ( opendir DIR, $mainDir ) {
            while ( my $subDir = readdir DIR ) {
                my $thisDir = "$mainDir/$subDir";
                if ( $subDir =~ /^cache(-.+)?$/ and -d $thisDir ) {
                    $content .= qq{<dir:directory name="$subDir">\n};

                    if ( opendir SUBDIR, $thisDir ) {
                        while ( my $f = readdir SUBDIR ) {
                            if ( $f =~ /^.+\.xml$/ and -f "$thisDir/$f" ) {
                                $content .= qq{<dir:file name="$f"/>\n};
                            }
                        }
                    }
                    $content .= qq{</dir:directory>\n};
                }
            }
        }

        qq{$content</dir:directory>\n};
    }

    #
    # execute a shell-type of command with a error 404 on timeout or other error
    #
    # ---------------------------------------------
    sub shellCmd {
        my $timeout = $timeout{shell} || 5;
        my ( $caller, @command ) = @_;
        my ( @lines, $redirected, $pid );

        @command or die "$caller: Shell->cmd with an undefined query\n";

        local $SIG{'__DIE__'} = sub {
            kill 9, $pid if $pid;    # kill off truant child as well

            &hterror404(<<"CONTENT");
Resource <blockquote><pre>$::address</pre></blockquote>
Timeout or error when executing command:
<blockquote><pre>@command</pre></blockquote>
CONTENT
        };

        # command evaluation
        local ( *OLDERR, $@ );
        eval {
            local $SIG{ALRM} = sub { die "TIMEOUT\n"; };    # NB: '\n' required
            alarm $timeout;

            local *PIPE;
            open OLDERR, ">&", \*STDERR and $redirected++;
            open STDERR, ">/dev/null";

            # open without shell (fork)
            $pid = open PIPE, '-|', @command;
            if ($pid) {
                @lines = <PIPE>;
            }
            close PIPE;

            die "(EE) ", @lines if $?;
            alarm 0;
        };

        # restore stderr
        open STDERR, ">&OLDERR" if $redirected;

        # eval errors are handled via the previous die handler
        wantarray ? @lines : join '' => @lines;
    }

    #
    # Execute <sge_root>/bin/<arch>/cmd with a timeout.
    # For security, only allow absolute paths.
    #
    # Prototype gridEngineCmd( clusterName, command => [command args] )
    #
    # %clusterPaths must be up-to-date before calling
    # ---------------------------------------------
    sub gridEngineCmd {
        my ( $cluster, $cmd, @cmdArgs ) = @_;
        my ( $root, $cell, $arch );

        ## programming error
        $cmd or die "gridEngineCmd called without a command\n";

        $cluster ||= '';

        # get root/cell from config information,
        # allow 'default' to use pre-configured value
        if (    exists $clusterPaths{$cluster}
            and exists $clusterPaths{$cluster}{root} )
        {
            $root = $clusterPaths{$cluster}{root};
            $cell = $clusterPaths{$cluster}{cell};
            $arch = $clusterPaths{$cluster}{arch};
        }
        elsif ( $cluster eq "default" )
        {
            $root = $sge_root;
        }
        $root ||= '';
        $cell ||= "default";    # fallback
        $arch ||= $sge_arch;    # fallback

        # need root + cell directory
        -d $root and $root =~ m{^/} and -d "$root/$cell"
          or &hterror404(<<"CONTENT");
Resource <blockquote><pre>$::address</pre></blockquote>
Root or Cell directory does not exist for cluster <em>$cluster</em>
<blockquote><pre>
SGE_ROOT="$root"
SGE_CELL="$cell"
arch="$arch"
</pre></blockquote>
while executing command:
<blockquote><pre>$cmd @cmdArgs</pre></blockquote>
CONTENT

        #
        # resolve cmd in the <sge_root>/bin/<arch>/ directory
        #
        my $cmdPath = "$root/bin/$arch/$cmd";

        -f $cmdPath and -x _ or &hterror404(<<"CONTENT");
Resource<blockquote><pre>$::address</pre></blockquote>
For cluster <em>$cluster</em>
<blockquote><pre>
SGE_ROOT="$root"
SGE_CELL="$cell"
arch="$arch"
</pre></blockquote>
Could not resolve command
<blockquote><pre>
$root/bin/$arch/
$cmd @cmdArgs
</pre></blockquote>
CONTENT

        # localizing should be okay, but seems to fail?!
        # - good that we are using a daemon mode anyhow
        # local *ENV;
        $ENV{SGE_ROOT} = $root;
        $ENV{SGE_CELL} = $cell;

        my $libDir = "$root/lib/$arch";
        if ( $libEnvName and -d $libDir ) {
            $ENV{$libEnvName} = $libDir;
        }

        # first argument is a currently just a dummy (OO-remnant)
        my $content = shellCmd( "gridEngineCmd", $cmdPath, @cmdArgs );

        $content =~ s{</*>\s*}{}g if $content;    # cleanup incorrect XML
        $content;
    }

    #
    # Search cache-{clusterName}/ and cache/ for cache files. If this
    # fails, attempt the fallback command.
    # If the first parameter of the fallback command is a code reference,
    # call directly with the remaining arguments.
    #
    # Prototype xmlFromCache( clusterName, cacheName, [command] )
    #
    # ---------------------------------------------
    sub xmlFromCache {
        my ( $cluster, $cacheName, $altCmd ) = @_;
        my $mainDir = $webappPath;

        $cacheName =~ s{\.xml$}{};

        my $cacheFile;
        for (
              ( not $cluster or $cluster eq "default" )
            ? ("cache/$cacheName")
            : ( "cache-$cluster/$cacheName", "cache/$cacheName~$cluster" )
          )
        {
            my $x = "$mainDir/$_.xml";

            if ( -f $x ) {
                $cacheFile = $x;
                last;
            }
        }

        my $content;

        if ($cacheFile) {
            local ( *XMLFILE, $/ );    ## slurp mode
            if ( open XMLFILE, $cacheFile ) {
                $content = <XMLFILE>;
            }
        }
        elsif ( $cluster
            and exists $clusterPaths{$cluster}
            and exists $clusterPaths{$cluster}{baseURL} )
        {
            ## url may or may not have trailing slash
            ( my $url = "$clusterPaths{$cluster}{baseURL}" ) =~ s{/+$}{};
            $url .= "/$cacheName.xml";

            my $got = get_http_source($url);
            if ( ref $got eq "ARRAY" ) {
                $content = $got->[2];
            }
            else {
                &hterror404(<<"CONTENT");
Could not fetch <blockquote><pre>$url</pre></blockquote>
CONTENT
            }
        }
        elsif ( ref $altCmd eq "ARRAY" ) {
            my ( $cmd, @cmdArgs ) = @$altCmd;

            if ( ref $cmd eq "CODE" ) {
                ## code ref gets called directly
                $content = &$cmd(@cmdArgs);
            }
            else {
                ## array ref gets called via command generator
                $content = shellCmd( "command-generator", $cmd, @cmdArgs );
            }
        }

        if ($content) {
            ## strip <?xml ...?> # or have problems later!
            $content =~ s{^\s*<\?xml[^?]+\?>\s*}{}sx;

            # we could also do a simple check for non-truncated content?
        }
        else {
            &hterror404(<<"CONTENT");
Cannot resolve resource <blockquote><pre>$::address</pre></blockquote>
CONTENT
        }

        $content;
    }

    #
    # resource handler for /<webapp> path
    #
    # globals used/adjusted:
    #   - $::address
    #   - $::path
    # ------------------------------
    sub resource_xmlqstat {

        # basic xslt parameters
        my %xsltParam = (
            timestamp  => POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime ),
            serverName => $::server_host,
        );

        #
        # quick serving of qhost/qstat information
        # ----------------------------------------
        #    /qhost.xml
        #    /qstat.xml
        #    /qstatf.xml
        #    /qstatj.xml
        #
        if ( $::address =~ m{^/(q[a-z]+)\.xml$} ) {
            my ( $function, $clusterName ) = ( $1, "default" );
            if ( exists $gridEngineQuery{$function} ) {
                updateClusterConfig();

                returnXML(
                    xmlProlog(%xsltParam),
                    xmlFromCache(
                        $clusterName,
                        $function =>
                          [ $gridEngineQuery{$function}, $clusterName ]
                    )
                );
            }
            return;
        }

        # trivial check - not our resource
        return if $::address !~ m{$webappRE(?:/|$)};

        # the file paths must exist
        # give diagnosis of what is missing or mis-configured:
        -d $webappPath or &hterror404(<<"CONTENT");
Possible installation error for handler <blockquote><pre>/$webappName/</pre></blockquote>
The underlying web-app path:
<blockquote><pre>$webappPath</pre></blockquote>
does not seem to exist.
CONTENT

        # place named parameters in %param and unnamed parameters in %switch
        my ( %param, %switch );
        parseRequestString( \%param, \%switch );

        # disable stylesheets upon request
        if ( exists $switch{rawxml} or delete $param{rawxml} ) {
            $xsltParam{rawxml} = "true";
        }

        # silently disable stylesheets if the xsl/ directory is missing
        # this could help with minimal installations
        -d "$webappPath/xsl" or $xsltParam{rawxml} = "true";

        #
        # update what we know about the cluster configuration
        #
        updateClusterConfig();

        #
        # re-direct rules first
        # ---------------------

        #    /<webapp>
        # or /<webapp>/cluster
        # or /<webapp>/cluster/
        # -> /<webapp>/
        if ( $::address =~ m{$webappRE(/cluster/*)?$} ) {
            &hterror301("/$webappName/");
        }

        #    /<webapp>/cluster/{clusterName}
        # -> /<webapp>/cluster/{clusterName}/jobs
        if ( $::address =~ m{$webappRE/cluster/([^\s/]+?)/*$} ) {
            my ($clusterName) = ($1);
            $::address =~ s{/+$}{};

            # redirect for known clusters (including "default")
            if ( exists $clusterPaths{$clusterName} ) {
                &hterror301("$::address/jobs");
            }
            else {
                &hterror404;
            }
        }

        # path rewriting for static files - remap relative paths transparently
        #
        #    /<webapp>/.../css/.../*.(css|png)
        #    /<webapp>/..../javascript/*.js
        #    /<webapp>/..../xsl/*.xsl
        # etc
        # -> /<webapp>/css/.../*.(css|png) etc
        if (
            $::address =~ m{$webappRE/.*
                  (
                      /(?:config|css|javascript|x[ms]l)/
                      .+\.(?:css|js|png|x[ms]l)
                  )
                  $}x
          )
        {
            $::path    = $webappPath;
            $::address = $1;

            return;    # done rewriting
        }

        #
        #  /<webapp>/
        #  /<webapp>/index.xml
        #
        if ( $::address =~ m{$webappRE/(?:index(\.xml))?$} ) {
            $xsltParam{urlExt} = $1 if $1;

            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    "server-info" => "HTTPi/$::VERSION",
                    stylesheet    => "xsl/index-xhtml.xsl",
                ),
                directoryGeneratorCacheFiles()
            );
        }

        #
        #  /<webapp>/cache
        #
        if ( $::address =~ m{$webappRE/cache$} ) {
            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    dir        => "cache",
                    stylesheet => "xsl/directory-xhtml.xsl"
                ),
                directoryGeneratorCacheFiles()
            );
        }

        #
        #  /<webapp>/test(.xml)
        #
        if ( $::address =~ m{$webappRE/test(\.xml)?$} ) {
            returnXML(
                xmlProlog(
                    %xsltParam,           #
                    stylesheet => "xsl/test-xhtml.xsl",
                ),
                "<xmlqstat-test/>"
            );
        }

        #
        # create directory listings
        #  /<webapp>/config
        #  /<webapp>/xsl
        #
        if ( $::address =~ m{$webappRE/(config|xsl)$} ) {
            my $dir = $1;

            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    stylesheet => "./xsl/directory-xhtml.xsl",
                ),
                directoryGenerator($dir)
            );
        }

        #
        # /<webapp>/info/*
        #
        if ( $::address =~ m{$webappRE/(info/.+)\.html$} ) {
            my $file = "xml/$1.xml";

            returnXML(
                xmlProlog(
                    %xsltParam,    #
                    stylesheet => "xsl/info-to-xhtml.xsl",
                ),
                xmlFromFile($file)
            );
        }

        #
        # /<webapp>/cluster/{clusterName}/{function}(.xml)
        #
        if ( $::address =~
            m{$webappRE/cluster/([^\s/]+?)/([^\s/]+?)(\.xml)?/*$} )
        {
            my ( $clusterName, $function, $urlExt ) = ( $1, $2, $3 );

            $xsltParam{urlExt}      = $urlExt if $urlExt;
            $xsltParam{clusterName} = $clusterName;

            #
            # job : with optional user=... filter
            #
            if ( $function eq "jobs" ) {
                if ( defined $param{user} and $param{user} =~ m{^\w+$} ) {
                    $xsltParam{filterByUser} = $param{user};
                }

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qstat-xhtml.xsl",
                    ),
                    xmlFromCache( $clusterName, qstat => undef )
                );
            }

            #
            # jobinfo : with optional jobId
            #
            if ( $function eq "jobinfo" ) {
                my ($jobId) = grep { $_ and /^\d+/ } keys %switch;

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qstatj-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,    #
                        qstatj =>
                          [ $gridEngineQuery{qstatj}, $clusterName, $jobId ]
                    )
                );
            }

            #
            # queues : with optional renderMode (summary|free|warn)
            #
            if ( $function eq "queues" ) {
                ( $xsltParam{renderMode} ) =
                  grep { m{^(summary|free|warn)$} } keys %switch;

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qhost-xhtml.xsl",
                    ),
                    xmlFromCache( $clusterName, qhost => undef )
                );
            }

            #
            # resources : display licenses etc
            #
            if ( $function eq "resources" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "../../xsl/qlic-xhtml.xsl",
                    ),
                    xmlFromCache( $clusterName, qlicserver => undef, )
                );
            }

            #
            # cache : display directory of cluster cache files
            #
            if ( $function eq "cache" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,
                        prefix     => ".",
                        stylesheet => "../../xsl/directory-xhtml.xsl",
                    ),
                    directoryGenerator("cache-$clusterName"),
                );
            }

            # *.xml specified - attempt to serve cached file
            if ( delete $xsltParam{urlExt} ) {
                returnXML(
                    xmlProlog(%xsltParam),    #
                    xmlFromCache( $clusterName, $function )
                );
            }

            ## can't be resolved - error404
            &hterror404;
        }

        # top-level rendering again
        # -------------------------

        #
        # special handling for
        # qstatf.xml, qstatf~.xml and qstatf~{clusterName}.xml
        #
        if (   $::address =~ m{$webappRE/(qstatf)[~]([^\s/]*)\.xml$}
            or $::address =~ m{$webappRE/(qstatf)\.xml$} )
        {
            my ( $function, $clusterName ) = ( $1, $2 );

            #
            # raw qstat -f query
            #
            if ( $function eq "qstatf" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        clusterName => $clusterName,
                        rawxml      => "true",
                    ),
                    xmlFromCache(
                        $clusterName,
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    )
                );
            }
        }

        #
        #    /<webapp>/(resource|jobs|..)~{clusterName}(.xml)
        # or /<webapp>/(resource|jobs|..)(.xml)
        #
        if (   $::address =~ m{$webappRE/(\w+)[~]([^\s/]*?)(\.xml)?$}
            or $::address =~ m{$webappRE/(\w+)(\.xml)?$} )
        {
            my ( $function, $clusterName, $urlExt ) = ( $1, $2, $3 );

            $xsltParam{urlExt}      = $urlExt if $urlExt;
            $xsltParam{clusterName} = $clusterName;
            $xsltParam{menuMode}    = "qstatf";

            #
            # job : with optional user=... filter
            #
            if ( $function eq "jobs" ) {
                if ( defined $param{user} and $param{user} =~ m{^\w+$} ) {
                    $xsltParam{filterByUser} = $param{user};
                }

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        renderMode => "jobs",
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    )
                );
            }

            #
            # jobinfo : with optional jobId
            #
            if ( $function eq "jobinfo" ) {
                my ($jobId) = grep { $_ and /^\d+/ } keys %switch;

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "xsl/qstatj-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,    #
                        qstatj =>
                          [ $gridEngineQuery{qstatj}, $clusterName, $jobId ]
                    )
                );
            }

            #
            # queues : with optional renderMode (summary|free|warn)
            #
            if ( $function eq "queues" ) {
                ( $xsltParam{renderMode} ) =
                  grep { m{^(summary|free|warn)$} } keys %switch;

                # default is "queues", but state it explicitly anyhow
                $xsltParam{renderMode} ||= "queues";

                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    )
                );
            }

            #
            # report : renderMode 'report'
            #
            if ( $function eq "report" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        renderMode => "report",
                        stylesheet => "xsl/qstatf-xhtml.xsl",
                    ),
                    xmlFromCache(
                        $clusterName,
                        qstatf => [ $gridEngineQuery{qstatf}, $clusterName ]
                    )
                );
            }

            #
            # resources : display licenses etc
            #
            if ( $function eq "resources" ) {
                returnXML(
                    xmlProlog(
                        %xsltParam,    #
                        stylesheet => "xsl/qlic-xhtml.xsl",
                    ),
                    xmlFromCache( $clusterName, qlicserver => undef )
                );
            }

            ## can't be resolved - error404
            &hterror404;
        }

        ## warn "fall-thru with $::address\n";
        $::path = $webappPath;
        $::address =~ s{$webappRE}{};

    }

}

##</xmlqstat>##
# ------------------------------------------------------------------------------
# End of xml-qstat copyright segment.
#
# -----------------------------------------------------------------------------

