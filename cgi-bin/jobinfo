#!/usr/bin/perl -w
use strict;

# adjust for your installation:
$::webappPath = "/export/home/cfdadmin/xml-qstat/web-app";

# -----------------------------------------------------------------------------
#
# jobinfo cgi script
#
# This is a simple CGI that should function under Apache and HTTPi webservers.
# It gets raw XML data about job status ("qstat -xml -j <jobID>") that we
# can feed to Cocoon for XSLT processing.
#
# To get it working:
# ------------------
# 1. Install the script in a cgi-bin directory somewhere on your webserver
# 2. Edit $webappPath to suit your installation
# 3. Edit the <jobinfo> entry in config/config.xml
#    to point to this cgi on your system
# 3. The 'cluster' CGI parameters is used to retrieve the correct SGE_ROOT
#    and SGE_CELL environment settings for the named cluster.
#
# Note:
# -----
#   The principal advantages of using this script instead of the java
#   command generator directly:
#     - it can deal with empty query strings and use that to display details
#       for all jobs rather than just the scheduler messages
#     - any input errors yield XML output with '<error>'
#     - it removes empty elements that occur if an incorrect jobId is queried
#
#   Using the httpi webserver (http://www.floodgap.com/httpi) as the second
#   webserver has a minimal overhead and provides a very convenient means
#   of dynamically generating other non-XML content.
#
# -----------------------------------------------------------------------------
# boilerplate for hand-rolled cgi scripts

require "$::webappPath/../cgi-bin/xmlqstat-cgibits.pl";

# -----------------------------------------------------------------------------
# The main program:

# finalize GridEngine environment, call directly (don't adjust path)
my @qstat;
{
    my $archScript = "$ENV{SGE_ROOT}/util/arch";

    chomp( my $sgeArch = qx{$ENV{SGE_ROOT}/util/arch 2>/dev/null} || '' );
    my $bin = "$ENV{SGE_ROOT}/bin/$sgeArch";

    # library path setting for architectures where RUNPATH is not supported
    unless ( $sgeArch =~ /^(lx|sol)/ or $sgeArch eq "hp11-64" ) {
        chomp( my $libEnv = qx{$archScript -lib 2>/dev/null} || '' );

        my $libDir = "$ENV{SGE_ROOT}/lib/$sgeArch";
        if ( $libEnv and -d $libDir ) {
            if ( exists $ENV{$libEnv} ) {
                $ENV{$libEnv} = "$libDir:$ENV{$libEnv}";
            }
            else {
                $ENV{$libEnv} = $libDir;
            }
        }
    }

    @qstat = ( "$bin/qstat", "-xml", "-j" );

    -d $bin and -x $qstat[0]
      or &error("qstat not found: $qstat[0]");
}

# -----------------------------------------------------------------------------

#
# the job= parameter has precedence
# restrict to alphanumeric input (jobNumber or jobName)
#
if ( exists $::param{job} ) {
    @::ids = grep { defined and /^(\w+)$/ } split /, /, $::param{job};
}

# treat an empty query parameter as '*'
# this wildcard is not as dangerous as it may appear
# - we are calling qstat directly without using the shell
#
@::ids or @::ids = '*';

push @qstat, join( "," => @::ids );

{
    local ( *PIPE, $/ );
    if ( open PIPE, '-|', @qstat ) {    # open without shell
        my $content = <PIPE>;
        $content =~ s{</?>}{}g;         # a bad jobId yields empty elements!

        outputXML($content);
    }
    else {
        &error("cannot execute qstat");
    }
}

1;

# ----------------------------------------------------------------- end-of-file
